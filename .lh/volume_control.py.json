{
    "sourceFile": "volume_control.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 27,
            "patches": [
                {
                    "date": 1621811391768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1621812545138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,8 @@\n \r\n \r\n from pynput.keyboard import Key, Controller #https://pypi.org/project/pynput/\r\n \r\n-\r\n-\r\n import serial\r\n from time import sleep\r\n \r\n from math import log, exp\r\n@@ -78,9 +76,8 @@\n     #             self.volume = min(1.0, self.volume+decibels)\r\n     #             interface.SetMasterVolume(self.volume, None)\r\n     #             print('Volume raised to', self.volume)  # debug\r\n \r\n-\r\n def initiateAudioController():\r\n     controller = []\r\n \r\n     chan1_1, chan1_2 = 'brave','Twitch'\r\n@@ -126,10 +123,8 @@\n             pot, sw = dataEval\r\n             # print(pot)\r\n \r\n             for i in range(len(pot)):\r\n-                if pot[i] <= 0.009:\r\n-                    pot[i] == 0\r\n                 if i == 0:\r\n                     masterVal = -78*exp(-3.97*pot[i])+1.452\r\n                     master.SetMasterVolumeLevel(masterVal, None)\r\n                 elif i == 1:\r\n@@ -153,10 +148,16 @@\n                     pass\r\n \r\n \r\n             for i in range(len(sw)):\r\n+                #process only a keypress per time period?\r\n+\r\n+                \r\n+                #in time period set keypress to activate certain macros, probably \r\n+\r\n                 pass\r\n-            \r\n+\r\n+\r\n         except:\r\n             pass\r\n \r\n \r\n"
                },
                {
                    "date": 1621812639097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,22 +85,24 @@\n     chan3_1, chan3_2 = 'Discord',''\r\n     chan4_1, chan4_2 = 'csgo',''\r\n \r\n     #channel 0 reserved for master volume\r\n-    #channel 1 \r\n+    #channel 1 (browser?)\r\n     controller.append(AudioController(chan1_1 + '.exe'))\r\n     controller.append(AudioController(chan1_2 + '.exe'))\r\n-    #channel 2\r\n+    #channel 2 (multimedia spotify netflix..)\r\n     controller.append(AudioController(chan2_1 + '.exe'))\r\n     controller.append(AudioController(chan2_2 + '.exe'))\r\n \r\n-    #channel 3\r\n+    #channel 3 \r\n     controller.append(AudioController(chan3_1 + '.exe'))\r\n     controller.append(AudioController(chan3_2 + '.exe'))\r\n \r\n-    #channel 4\r\n+    #channel 4 (for games)\r\n     controller.append(AudioController(chan4_1 + '.exe'))\r\n     controller.append(AudioController(chan4_2 + '.exe'))\r\n+    controller.append(AudioController(chan4_2 + '.exe'))\r\n+    controller.append(AudioController(chan4_2 + '.exe'))\r\n \r\n     return controller\r\n \r\n def main():\r\n@@ -141,9 +143,10 @@\n                     controller[5].set_volume(pot[i])\r\n                     pass                    \r\n                 elif i == 4:\r\n                     #gaming channel\r\n-                    \r\n+                    controller[6].set_volume(pot[i])\r\n+                    controller[7].set_volume(pot[i])\r\n                     pass\r\n                 else:\r\n                     pass\r\n \r\n"
                },
                {
                    "date": 1621812717726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,8 +85,9 @@\n     chan3_1, chan3_2 = 'Discord',''\r\n     chan4_1, chan4_2 = 'csgo',''\r\n \r\n     #channel 0 reserved for master volume\r\n+    #could be some kind of for loop for a list in a to create the individual channels\r\n     #channel 1 (browser?)\r\n     controller.append(AudioController(chan1_1 + '.exe'))\r\n     controller.append(AudioController(chan1_2 + '.exe'))\r\n     #channel 2 (multimedia spotify netflix..)\r\n"
                },
                {
                    "date": 1621812874759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,169 @@\n+\r\n+from __future__ import print_function\r\n+\r\n+from ctypes import cast, POINTER\r\n+from comtypes import CLSCTX_ALL\r\n+from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume\r\n+\r\n+from pycaw.pycaw import AudioUtilities\r\n+\r\n+\r\n+from pynput.keyboard import Key, Controller #https://pypi.org/project/pynput/\r\n+\r\n+import serial\r\n+from time import sleep\r\n+\r\n+from math import log, exp\r\n+\r\n+from serial.serialwin32 import Serial\r\n+ser = serial.Serial('COM3', 115200, timeout=None)\r\n+\r\n+class AudioController(object):\r\n+    def __init__(self, process_name):\r\n+        self.process_name = process_name\r\n+        self.volume = self.process_volume()\r\n+\r\n+    def mute(self):\r\n+        sessions = AudioUtilities.GetAllSessions()\r\n+        for session in sessions:\r\n+            interface = session.SimpleAudioVolume\r\n+            if session.Process and session.Process.name() == self.process_name:\r\n+                interface.SetMute(1, None)\r\n+                print(self.process_name, 'has been muted.')  # debug\r\n+\r\n+    def unmute(self):\r\n+        sessions = AudioUtilities.GetAllSessions()\r\n+        for session in sessions:\r\n+            interface = session.SimpleAudioVolume\r\n+            if session.Process and session.Process.name() == self.process_name:\r\n+                interface.SetMute(0, None)\r\n+                print(self.process_name, 'has been unmuted.')  # debug\r\n+\r\n+    def process_volume(self):\r\n+        sessions = AudioUtilities.GetAllSessions()\r\n+        for session in sessions:\r\n+            interface = session.SimpleAudioVolume\r\n+            if session.Process and session.Process.name() == self.process_name:\r\n+                # print('Volume:', interface.GetMasterVolume())  # debug\r\n+                return interface.GetMasterVolume()\r\n+\r\n+    def set_volume(self, decibels):\r\n+        sessions = AudioUtilities.GetAllSessions()\r\n+        for session in sessions:\r\n+            interface = session.SimpleAudioVolume\r\n+            if session.Process and session.Process.name() == self.process_name:\r\n+                # only set volume in the range 0.0 to 1.0\r\n+                self.volume = min(1.0, max(0.0, decibels))\r\n+                interface.SetMasterVolume(self.volume, None)\r\n+                # print('Volume set to', self.volume)  # debug\r\n+\r\n+    # def decrease_volume(self, decibels):\r\n+    #     sessions = AudioUtilities.GetAllSessions()\r\n+    #     for session in sessions:\r\n+    #         interface = session.SimpleAudioVolume\r\n+    #         if session.Process and session.Process.name() == self.process_name:\r\n+    #             # 0.0 is the min value, reduce by decibels\r\n+    #             self.volume = max(0.0, self.volume-decibels)\r\n+    #             interface.SetMasterVolume(self.volume, None)\r\n+    #             print('Volume reduced to', self.volume)  # debug\r\n+\r\n+    # def increase_volume(self, decibels):\r\n+    #     sessions = AudioUtilities.GetAllSessions()\r\n+    #     for session in sessions:\r\n+    #         interface = session.SimpleAudioVolume\r\n+    #         if session.Process and session.Process.name() == self.process_name:\r\n+    #             # 1.0 is the max value, raise by decibels\r\n+    #             self.volume = min(1.0, self.volume+decibels)\r\n+    #             interface.SetMasterVolume(self.volume, None)\r\n+    #             print('Volume raised to', self.volume)  # debug\r\n+\r\n+def initiateAudioController():\r\n+    controller = []\r\n+\r\n+    chan1_1, chan1_2 = 'brave','Twitch'\r\n+    chan2_1, chan2_2 = 'Spotify',''\r\n+    chan3_1, chan3_2 = 'Discord',''\r\n+    chan4_1, chan4_2 = 'csgo',''\r\n+\r\n+    #channel 0 reserved for master volume\r\n+    #could be some kind of for loop for a list in a to create the individual channels\r\n+\r\n+    #channel 1 (browser?)\r\n+    controller.append(AudioController(chan1_1 + '.exe'))\r\n+    controller.append(AudioController(chan1_2 + '.exe'))\r\n+    #channel 2 (multimedia spotify netflix..)\r\n+    controller.append(AudioController(chan2_1 + '.exe'))\r\n+    controller.append(AudioController(chan2_2 + '.exe'))\r\n+\r\n+    #channel 3 \r\n+    controller.append(AudioController(chan3_1 + '.exe'))\r\n+    controller.append(AudioController(chan3_2 + '.exe'))\r\n+\r\n+    #channel 4 (for games)\r\n+    controller.append(AudioController(chan4_1 + '.exe'))\r\n+    controller.append(AudioController(chan4_2 + '.exe'))\r\n+\r\n+    return controller\r\n+\r\n+def main():\r\n+    controller = initiateAudioController()\r\n+\r\n+    devices = AudioUtilities.GetSpeakers()\r\n+    interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)\r\n+\r\n+    master = cast(interface, POINTER(IAudioEndpointVolume))\r\n+\r\n+    print('start')\r\n+    while True:\r\n+        try:\r\n+\r\n+            #waiting for serial data\r\n+            data = (ser.readline().rstrip()).decode()\r\n+            dataEval = eval('[' + data + ']')[0]\r\n+            print(dataEval)\r\n+            #potentiometer and switch data\r\n+            pot, sw = dataEval\r\n+            # print(pot)\r\n+\r\n+            for i in range(len(pot)):\r\n+                if i == 0:\r\n+                    masterVal = -78*exp(-3.97*pot[i])+1.452\r\n+                    master.SetMasterVolumeLevel(masterVal, None)\r\n+                elif i == 1:\r\n+                    #general media, brave, twitch? \r\n+                    controller[0].set_volume(pot[i])\r\n+                    controller[1].set_volume(pot[i]) \r\n+                elif i == 2:\r\n+                    #Spotify channel other media? (netflix?) \r\n+                    controller[2].set_volume(pot[i])\r\n+                    controller[3].set_volume(pot[i])\r\n+                elif i == 3:\r\n+                    #Discord channel\r\n+                    controller[4].set_volume(pot[i])\r\n+                    controller[5].set_volume(pot[i])\r\n+                    pass                    \r\n+                elif i == 4:\r\n+                    #gaming channel\r\n+                    controller[6].set_volume(pot[i])\r\n+                    controller[7].set_volume(pot[i])\r\n+                    pass\r\n+                else:\r\n+                    pass\r\n+\r\n+\r\n+            for i in range(len(sw)):\r\n+                #process only a keypress per time period?\r\n+\r\n+                \r\n+                #in time period set keypress to activate certain macros, probably \r\n+\r\n+                pass\r\n+\r\n+\r\n+        except:\r\n+            pass\r\n+\r\n+\r\n+\r\n+if __name__ == \"__main__\":\r\n+    main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1621812937364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,12 +79,12 @@\n \r\n def initiateAudioController():\r\n     controller = []\r\n \r\n-    chan1_1, chan1_2 = 'brave','Twitch'\r\n-    chan2_1, chan2_2 = 'Spotify',''\r\n-    chan3_1, chan3_2 = 'Discord',''\r\n-    chan4_1, chan4_2 = 'csgo',''\r\n+    chan1 = ['brave','Twitch']\r\n+    chan2 = ['Spotify','']\r\n+    chan3, chan3 = ['Discord','']\r\n+    chan4 = ['csgo','']\r\n \r\n     #channel 0 reserved for master volume\r\n     #could be some kind of for loop for a list in a to create the individual channels\r\n \r\n@@ -165,175 +165,5 @@\n \r\n \r\n \r\n if __name__ == \"__main__\":\r\n-    main()\n-\r\n-from __future__ import print_function\r\n-\r\n-from ctypes import cast, POINTER\r\n-from comtypes import CLSCTX_ALL\r\n-from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume\r\n-\r\n-from pycaw.pycaw import AudioUtilities\r\n-\r\n-\r\n-from pynput.keyboard import Key, Controller #https://pypi.org/project/pynput/\r\n-\r\n-import serial\r\n-from time import sleep\r\n-\r\n-from math import log, exp\r\n-\r\n-from serial.serialwin32 import Serial\r\n-ser = serial.Serial('COM3', 115200, timeout=None)\r\n-\r\n-class AudioController(object):\r\n-    def __init__(self, process_name):\r\n-        self.process_name = process_name\r\n-        self.volume = self.process_volume()\r\n-\r\n-    def mute(self):\r\n-        sessions = AudioUtilities.GetAllSessions()\r\n-        for session in sessions:\r\n-            interface = session.SimpleAudioVolume\r\n-            if session.Process and session.Process.name() == self.process_name:\r\n-                interface.SetMute(1, None)\r\n-                print(self.process_name, 'has been muted.')  # debug\r\n-\r\n-    def unmute(self):\r\n-        sessions = AudioUtilities.GetAllSessions()\r\n-        for session in sessions:\r\n-            interface = session.SimpleAudioVolume\r\n-            if session.Process and session.Process.name() == self.process_name:\r\n-                interface.SetMute(0, None)\r\n-                print(self.process_name, 'has been unmuted.')  # debug\r\n-\r\n-    def process_volume(self):\r\n-        sessions = AudioUtilities.GetAllSessions()\r\n-        for session in sessions:\r\n-            interface = session.SimpleAudioVolume\r\n-            if session.Process and session.Process.name() == self.process_name:\r\n-                # print('Volume:', interface.GetMasterVolume())  # debug\r\n-                return interface.GetMasterVolume()\r\n-\r\n-    def set_volume(self, decibels):\r\n-        sessions = AudioUtilities.GetAllSessions()\r\n-        for session in sessions:\r\n-            interface = session.SimpleAudioVolume\r\n-            if session.Process and session.Process.name() == self.process_name:\r\n-                # only set volume in the range 0.0 to 1.0\r\n-                self.volume = min(1.0, max(0.0, decibels))\r\n-                interface.SetMasterVolume(self.volume, None)\r\n-                # print('Volume set to', self.volume)  # debug\r\n-\r\n-    # def decrease_volume(self, decibels):\r\n-    #     sessions = AudioUtilities.GetAllSessions()\r\n-    #     for session in sessions:\r\n-    #         interface = session.SimpleAudioVolume\r\n-    #         if session.Process and session.Process.name() == self.process_name:\r\n-    #             # 0.0 is the min value, reduce by decibels\r\n-    #             self.volume = max(0.0, self.volume-decibels)\r\n-    #             interface.SetMasterVolume(self.volume, None)\r\n-    #             print('Volume reduced to', self.volume)  # debug\r\n-\r\n-    # def increase_volume(self, decibels):\r\n-    #     sessions = AudioUtilities.GetAllSessions()\r\n-    #     for session in sessions:\r\n-    #         interface = session.SimpleAudioVolume\r\n-    #         if session.Process and session.Process.name() == self.process_name:\r\n-    #             # 1.0 is the max value, raise by decibels\r\n-    #             self.volume = min(1.0, self.volume+decibels)\r\n-    #             interface.SetMasterVolume(self.volume, None)\r\n-    #             print('Volume raised to', self.volume)  # debug\r\n-\r\n-def initiateAudioController():\r\n-    controller = []\r\n-\r\n-    chan1_1, chan1_2 = 'brave','Twitch'\r\n-    chan2_1, chan2_2 = 'Spotify',''\r\n-    chan3_1, chan3_2 = 'Discord',''\r\n-    chan4_1, chan4_2 = 'csgo',''\r\n-\r\n-    #channel 0 reserved for master volume\r\n-    #could be some kind of for loop for a list in a to create the individual channels\r\n-    #channel 1 (browser?)\r\n-    controller.append(AudioController(chan1_1 + '.exe'))\r\n-    controller.append(AudioController(chan1_2 + '.exe'))\r\n-    #channel 2 (multimedia spotify netflix..)\r\n-    controller.append(AudioController(chan2_1 + '.exe'))\r\n-    controller.append(AudioController(chan2_2 + '.exe'))\r\n-\r\n-    #channel 3 \r\n-    controller.append(AudioController(chan3_1 + '.exe'))\r\n-    controller.append(AudioController(chan3_2 + '.exe'))\r\n-\r\n-    #channel 4 (for games)\r\n-    controller.append(AudioController(chan4_1 + '.exe'))\r\n-    controller.append(AudioController(chan4_2 + '.exe'))\r\n-    controller.append(AudioController(chan4_2 + '.exe'))\r\n-    controller.append(AudioController(chan4_2 + '.exe'))\r\n-\r\n-    return controller\r\n-\r\n-def main():\r\n-    controller = initiateAudioController()\r\n-\r\n-    devices = AudioUtilities.GetSpeakers()\r\n-    interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)\r\n-\r\n-    master = cast(interface, POINTER(IAudioEndpointVolume))\r\n-\r\n-    print('start')\r\n-    while True:\r\n-        try:\r\n-\r\n-            #waiting for serial data\r\n-            data = (ser.readline().rstrip()).decode()\r\n-            dataEval = eval('[' + data + ']')[0]\r\n-            print(dataEval)\r\n-            #potentiometer and switch data\r\n-            pot, sw = dataEval\r\n-            # print(pot)\r\n-\r\n-            for i in range(len(pot)):\r\n-                if i == 0:\r\n-                    masterVal = -78*exp(-3.97*pot[i])+1.452\r\n-                    master.SetMasterVolumeLevel(masterVal, None)\r\n-                elif i == 1:\r\n-                    #general media, brave, twitch? \r\n-                    controller[0].set_volume(pot[i])\r\n-                    controller[1].set_volume(pot[i]) \r\n-                elif i == 2:\r\n-                    #Spotify channel other media? (netflix?) \r\n-                    controller[2].set_volume(pot[i])\r\n-                    controller[3].set_volume(pot[i])\r\n-                elif i == 3:\r\n-                    #Discord channel\r\n-                    controller[4].set_volume(pot[i])\r\n-                    controller[5].set_volume(pot[i])\r\n-                    pass                    \r\n-                elif i == 4:\r\n-                    #gaming channel\r\n-                    controller[6].set_volume(pot[i])\r\n-                    controller[7].set_volume(pot[i])\r\n-                    pass\r\n-                else:\r\n-                    pass\r\n-\r\n-\r\n-            for i in range(len(sw)):\r\n-                #process only a keypress per time period?\r\n-\r\n-                \r\n-                #in time period set keypress to activate certain macros, probably \r\n-\r\n-                pass\r\n-\r\n-\r\n-        except:\r\n-            pass\r\n-\r\n-\r\n-\r\n-if __name__ == \"__main__\":\r\n     main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1621812966610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,169 @@\n+\r\n+from __future__ import print_function\r\n+\r\n+from ctypes import cast, POINTER\r\n+from comtypes import CLSCTX_ALL\r\n+from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume\r\n+\r\n+from pycaw.pycaw import AudioUtilities\r\n+\r\n+\r\n+from pynput.keyboard import Key, Controller #https://pypi.org/project/pynput/\r\n+\r\n+import serial\r\n+from time import sleep\r\n+\r\n+from math import log, exp\r\n+\r\n+from serial.serialwin32 import Serial\r\n+ser = serial.Serial('COM3', 115200, timeout=None)\r\n+\r\n+class AudioController(object):\r\n+    def __init__(self, process_name):\r\n+        self.process_name = process_name\r\n+        self.volume = self.process_volume()\r\n+\r\n+    def mute(self):\r\n+        sessions = AudioUtilities.GetAllSessions()\r\n+        for session in sessions:\r\n+            interface = session.SimpleAudioVolume\r\n+            if session.Process and session.Process.name() == self.process_name:\r\n+                interface.SetMute(1, None)\r\n+                print(self.process_name, 'has been muted.')  # debug\r\n+\r\n+    def unmute(self):\r\n+        sessions = AudioUtilities.GetAllSessions()\r\n+        for session in sessions:\r\n+            interface = session.SimpleAudioVolume\r\n+            if session.Process and session.Process.name() == self.process_name:\r\n+                interface.SetMute(0, None)\r\n+                print(self.process_name, 'has been unmuted.')  # debug\r\n+\r\n+    def process_volume(self):\r\n+        sessions = AudioUtilities.GetAllSessions()\r\n+        for session in sessions:\r\n+            interface = session.SimpleAudioVolume\r\n+            if session.Process and session.Process.name() == self.process_name:\r\n+                # print('Volume:', interface.GetMasterVolume())  # debug\r\n+                return interface.GetMasterVolume()\r\n+\r\n+    def set_volume(self, decibels):\r\n+        sessions = AudioUtilities.GetAllSessions()\r\n+        for session in sessions:\r\n+            interface = session.SimpleAudioVolume\r\n+            if session.Process and session.Process.name() == self.process_name:\r\n+                # only set volume in the range 0.0 to 1.0\r\n+                self.volume = min(1.0, max(0.0, decibels))\r\n+                interface.SetMasterVolume(self.volume, None)\r\n+                # print('Volume set to', self.volume)  # debug\r\n+\r\n+    # def decrease_volume(self, decibels):\r\n+    #     sessions = AudioUtilities.GetAllSessions()\r\n+    #     for session in sessions:\r\n+    #         interface = session.SimpleAudioVolume\r\n+    #         if session.Process and session.Process.name() == self.process_name:\r\n+    #             # 0.0 is the min value, reduce by decibels\r\n+    #             self.volume = max(0.0, self.volume-decibels)\r\n+    #             interface.SetMasterVolume(self.volume, None)\r\n+    #             print('Volume reduced to', self.volume)  # debug\r\n+\r\n+    # def increase_volume(self, decibels):\r\n+    #     sessions = AudioUtilities.GetAllSessions()\r\n+    #     for session in sessions:\r\n+    #         interface = session.SimpleAudioVolume\r\n+    #         if session.Process and session.Process.name() == self.process_name:\r\n+    #             # 1.0 is the max value, raise by decibels\r\n+    #             self.volume = min(1.0, self.volume+decibels)\r\n+    #             interface.SetMasterVolume(self.volume, None)\r\n+    #             print('Volume raised to', self.volume)  # debug\r\n+\r\n+def initiateAudioController():\r\n+    controller = []\r\n+\r\n+    chan1 = ['brave','Twitch']\r\n+    chan2 = ['Spotify','']\r\n+    chan3 = ['Discord','']\r\n+    chan4 = ['csgo','']\r\n+\r\n+    #channel 0 reserved for master volume\r\n+    #could be some kind of for loop for a list in a to create the individual channels\r\n+\r\n+    #channel 1 (browser?)\r\n+    controller.append(AudioController(chan1[0] + '.exe'))\r\n+    controller.append(AudioController(chan1[1] + '.exe'))\r\n+    #channel 2 (multimedia spotify netflix..)\r\n+    controller.append(AudioController(chan2[0] + '.exe'))\r\n+    controller.append(AudioController(chan2[1] + '.exe'))\r\n+\r\n+    #channel 3 \r\n+    controller.append(AudioController(chan3[0] + '.exe'))\r\n+    controller.append(AudioController(chan3[1] + '.exe'))\r\n+\r\n+    #channel 4 (for games)\r\n+    controller.append(AudioController(chan4[0] + '.exe'))\r\n+    controller.append(AudioController(chan4[1] + '.exe'))\r\n+\r\n+    return controller\r\n+\r\n+def main():\r\n+    controller = initiateAudioController()\r\n+\r\n+    devices = AudioUtilities.GetSpeakers()\r\n+    interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)\r\n+\r\n+    master = cast(interface, POINTER(IAudioEndpointVolume))\r\n+\r\n+    print('start')\r\n+    while True:\r\n+        try:\r\n+\r\n+            #waiting for serial data\r\n+            data = (ser.readline().rstrip()).decode()\r\n+            dataEval = eval('[' + data + ']')[0]\r\n+            print(dataEval)\r\n+            #potentiometer and switch data\r\n+            pot, sw = dataEval\r\n+            # print(pot)\r\n+\r\n+            for i in range(len(pot)):\r\n+                if i == 0:\r\n+                    masterVal = -78*exp(-3.97*pot[i])+1.452\r\n+                    master.SetMasterVolumeLevel(masterVal, None)\r\n+                elif i == 1:\r\n+                    #general media, brave, twitch? \r\n+                    controller[0].set_volume(pot[i])\r\n+                    controller[1].set_volume(pot[i]) \r\n+                elif i == 2:\r\n+                    #Spotify channel other media? (netflix?) \r\n+                    controller[2].set_volume(pot[i])\r\n+                    controller[3].set_volume(pot[i])\r\n+                elif i == 3:\r\n+                    #Discord channel\r\n+                    controller[4].set_volume(pot[i])\r\n+                    controller[5].set_volume(pot[i])\r\n+                    pass                    \r\n+                elif i == 4:\r\n+                    #gaming channel\r\n+                    controller[6].set_volume(pot[i])\r\n+                    controller[7].set_volume(pot[i])\r\n+                    pass\r\n+                else:\r\n+                    pass\r\n+\r\n+\r\n+            for i in range(len(sw)):\r\n+                #process only a keypress per time period?\r\n+\r\n+                \r\n+                #in time period set keypress to activate certain macros, probably \r\n+\r\n+                pass\r\n+\r\n+\r\n+        except:\r\n+            pass\r\n+\r\n+\r\n+\r\n+if __name__ == \"__main__\":\r\n+    main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1621813154363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+\r\n+from __future__ import print_function\r\n+\r\n+from ctypes import cast, POINTER\r\n+from comtypes import CLSCTX_ALL\r\n+from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume\r\n+\r\n+from pycaw.pycaw import AudioUtilities\r\n+\r\n+\r\n+from pynput.keyboard import Key, Controller #https://pypi.org/project/pynput/\r\n+\r\n+import serial\r\n+from time import sleep\r\n+\r\n+from math import log, exp\r\n+\r\n+from serial.serialwin32 import Serial\r\n+ser = serial.Serial('COM3', 115200, timeout=None)\r\n+\r\n+class AudioController(object):\r\n+    def __init__(self, process_name):\r\n+        self.process_name = process_name\r\n+        self.volume = self.process_volume()\r\n+\r\n+    def mute(self):\r\n+        sessions = AudioUtilities.GetAllSessions()\r\n+        for session in sessions:\r\n+            interface = session.SimpleAudioVolume\r\n+            if session.Process and session.Process.name() == self.process_name:\r\n+                interface.SetMute(1, None)\r\n+                print(self.process_name, 'has been muted.')  # debug\r\n+\r\n+    def unmute(self):\r\n+        sessions = AudioUtilities.GetAllSessions()\r\n+        for session in sessions:\r\n+            interface = session.SimpleAudioVolume\r\n+            if session.Process and session.Process.name() == self.process_name:\r\n+                interface.SetMute(0, None)\r\n+                print(self.process_name, 'has been unmuted.')  # debug\r\n+\r\n+    def process_volume(self):\r\n+        sessions = AudioUtilities.GetAllSessions()\r\n+        for session in sessions:\r\n+            interface = session.SimpleAudioVolume\r\n+            if session.Process and session.Process.name() == self.process_name:\r\n+                # print('Volume:', interface.GetMasterVolume())  # debug\r\n+                return interface.GetMasterVolume()\r\n+\r\n+    def set_volume(self, decibels):\r\n+        sessions = AudioUtilities.GetAllSessions()\r\n+        for session in sessions:\r\n+            interface = session.SimpleAudioVolume\r\n+            if session.Process and session.Process.name() == self.process_name:\r\n+                # only set volume in the range 0.0 to 1.0\r\n+                self.volume = min(1.0, max(0.0, decibels))\r\n+                interface.SetMasterVolume(self.volume, None)\r\n+                # print('Volume set to', self.volume)  # debug\r\n+\r\n+    # def decrease_volume(self, decibels):\r\n+    #     sessions = AudioUtilities.GetAllSessions()\r\n+    #     for session in sessions:\r\n+    #         interface = session.SimpleAudioVolume\r\n+    #         if session.Process and session.Process.name() == self.process_name:\r\n+    #             # 0.0 is the min value, reduce by decibels\r\n+    #             self.volume = max(0.0, self.volume-decibels)\r\n+    #             interface.SetMasterVolume(self.volume, None)\r\n+    #             print('Volume reduced to', self.volume)  # debug\r\n+\r\n+    # def increase_volume(self, decibels):\r\n+    #     sessions = AudioUtilities.GetAllSessions()\r\n+    #     for session in sessions:\r\n+    #         interface = session.SimpleAudioVolume\r\n+    #         if session.Process and session.Process.name() == self.process_name:\r\n+    #             # 1.0 is the max value, raise by decibels\r\n+    #             self.volume = min(1.0, self.volume+decibels)\r\n+    #             interface.SetMasterVolume(self.volume, None)\r\n+    #             print('Volume raised to', self.volume)  # debug\r\n+\r\n+def initiateAudioController():\r\n+    controller = []\r\n+\r\n+    chan1 = ['brave','Twitch']\r\n+    chan2 = ['Spotify','']\r\n+    chan3 = ['Discord','']\r\n+    chan4 = ['csgo','']\r\n+    chan = [chan1,chan2,chan3,chan4]\r\n+\r\n+    #channel 0 reserved for master volume\r\n+    #could be some kind of for loop for a list in a to create the individual channels\r\n+\r\n+    #channel 1 (browser?)\r\n+    for i in range(len(chan)):\r\n+        for j in range(len(chan[i])):\r\n+        controller.append(AudioController(chan[i][j] + '.exe'))\r\n+    #     controller.append(AudioController(chan[1] + '.exe'))\r\n+    # #channel 2 (multimedia spotify netflix..)\r\n+    # controller.append(AudioController(chan2[0] + '.exe'))\r\n+    # controller.append(AudioController(chan2[1] + '.exe'))\r\n+\r\n+    # #channel 3 \r\n+    # controller.append(AudioController(chan3[0] + '.exe'))\r\n+    # controller.append(AudioController(chan3[1] + '.exe'))\r\n+\r\n+    # #channel 4 (for games)\r\n+    # controller.append(AudioController(chan4[0] + '.exe'))\r\n+    # controller.append(AudioController(chan4[1] + '.exe'))\r\n+\r\n+    return controller\r\n+\r\n+def main():\r\n+    controller = initiateAudioController()\r\n+\r\n+    devices = AudioUtilities.GetSpeakers()\r\n+    interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)\r\n+\r\n+    master = cast(interface, POINTER(IAudioEndpointVolume))\r\n+\r\n+    print('start')\r\n+    while True:\r\n+        try:\r\n+\r\n+            #waiting for serial data\r\n+            data = (ser.readline().rstrip()).decode()\r\n+            dataEval = eval('[' + data + ']')[0]\r\n+            print(dataEval)\r\n+            #potentiometer and switch data\r\n+            pot, sw = dataEval\r\n+            # print(pot)\r\n+\r\n+            for i in range(len(pot)):\r\n+                if i == 0:\r\n+                    masterVal = -78*exp(-3.97*pot[i])+1.452\r\n+                    master.SetMasterVolumeLevel(masterVal, None)\r\n+                elif i == 1:\r\n+                    #general media, brave, twitch? \r\n+                    controller[0].set_volume(pot[i])\r\n+                    controller[1].set_volume(pot[i]) \r\n+                elif i == 2:\r\n+                    #Spotify channel other media? (netflix?) \r\n+                    controller[2].set_volume(pot[i])\r\n+                    controller[3].set_volume(pot[i])\r\n+                elif i == 3:\r\n+                    #Discord channel\r\n+                    controller[4].set_volume(pot[i])\r\n+                    controller[5].set_volume(pot[i])\r\n+                    pass                    \r\n+                elif i == 4:\r\n+                    #gaming channel\r\n+                    controller[6].set_volume(pot[i])\r\n+                    controller[7].set_volume(pot[i])\r\n+                    pass\r\n+                else:\r\n+                    pass\r\n+\r\n+\r\n+            for i in range(len(sw)):\r\n+                #process only a keypress per time period?\r\n+\r\n+                \r\n+                #in time period set keypress to activate certain macros, probably \r\n+\r\n+                pass\r\n+\r\n+\r\n+        except:\r\n+            pass\r\n+\r\n+\r\n+\r\n+if __name__ == \"__main__\":\r\n+    main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1621813303275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n \r\n     #channel 1 (browser?)\r\n     for i in range(len(chan)):\r\n         for j in range(len(chan[i])):\r\n-        controller.append(AudioController(chan[i][j] + '.exe'))\r\n+            controller.append(AudioController(chan[i][j] + '.exe'))\r\n     #     controller.append(AudioController(chan[1] + '.exe'))\r\n     # #channel 2 (multimedia spotify netflix..)\r\n     # controller.append(AudioController(chan2[0] + '.exe'))\r\n     # controller.append(AudioController(chan2[1] + '.exe'))\r\n@@ -133,10 +133,11 @@\n                     masterVal = -78*exp(-3.97*pot[i])+1.452\r\n                     master.SetMasterVolumeLevel(masterVal, None)\r\n                 elif i == 1:\r\n                     #general media, brave, twitch? \r\n-                    controller[0].set_volume(pot[i])\r\n-                    controller[1].set_volume(pot[i]) \r\n+                    for k in range(len(chan[0])):\r\n+                        controller[k].set_volume(pot[i])\r\n+                        # controller[1].set_volume(pot[i]) \r\n                 elif i == 2:\r\n                     #Spotify channel other media? (netflix?) \r\n                     controller[2].set_volume(pot[i])\r\n                     controller[3].set_volume(pot[i])\r\n@@ -168,343 +169,5 @@\n \r\n \r\n \r\n if __name__ == \"__main__\":\r\n-    main()\n-\r\n-from __future__ import print_function\r\n-\r\n-from ctypes import cast, POINTER\r\n-from comtypes import CLSCTX_ALL\r\n-from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume\r\n-\r\n-from pycaw.pycaw import AudioUtilities\r\n-\r\n-\r\n-from pynput.keyboard import Key, Controller #https://pypi.org/project/pynput/\r\n-\r\n-import serial\r\n-from time import sleep\r\n-\r\n-from math import log, exp\r\n-\r\n-from serial.serialwin32 import Serial\r\n-ser = serial.Serial('COM3', 115200, timeout=None)\r\n-\r\n-class AudioController(object):\r\n-    def __init__(self, process_name):\r\n-        self.process_name = process_name\r\n-        self.volume = self.process_volume()\r\n-\r\n-    def mute(self):\r\n-        sessions = AudioUtilities.GetAllSessions()\r\n-        for session in sessions:\r\n-            interface = session.SimpleAudioVolume\r\n-            if session.Process and session.Process.name() == self.process_name:\r\n-                interface.SetMute(1, None)\r\n-                print(self.process_name, 'has been muted.')  # debug\r\n-\r\n-    def unmute(self):\r\n-        sessions = AudioUtilities.GetAllSessions()\r\n-        for session in sessions:\r\n-            interface = session.SimpleAudioVolume\r\n-            if session.Process and session.Process.name() == self.process_name:\r\n-                interface.SetMute(0, None)\r\n-                print(self.process_name, 'has been unmuted.')  # debug\r\n-\r\n-    def process_volume(self):\r\n-        sessions = AudioUtilities.GetAllSessions()\r\n-        for session in sessions:\r\n-            interface = session.SimpleAudioVolume\r\n-            if session.Process and session.Process.name() == self.process_name:\r\n-                # print('Volume:', interface.GetMasterVolume())  # debug\r\n-                return interface.GetMasterVolume()\r\n-\r\n-    def set_volume(self, decibels):\r\n-        sessions = AudioUtilities.GetAllSessions()\r\n-        for session in sessions:\r\n-            interface = session.SimpleAudioVolume\r\n-            if session.Process and session.Process.name() == self.process_name:\r\n-                # only set volume in the range 0.0 to 1.0\r\n-                self.volume = min(1.0, max(0.0, decibels))\r\n-                interface.SetMasterVolume(self.volume, None)\r\n-                # print('Volume set to', self.volume)  # debug\r\n-\r\n-    # def decrease_volume(self, decibels):\r\n-    #     sessions = AudioUtilities.GetAllSessions()\r\n-    #     for session in sessions:\r\n-    #         interface = session.SimpleAudioVolume\r\n-    #         if session.Process and session.Process.name() == self.process_name:\r\n-    #             # 0.0 is the min value, reduce by decibels\r\n-    #             self.volume = max(0.0, self.volume-decibels)\r\n-    #             interface.SetMasterVolume(self.volume, None)\r\n-    #             print('Volume reduced to', self.volume)  # debug\r\n-\r\n-    # def increase_volume(self, decibels):\r\n-    #     sessions = AudioUtilities.GetAllSessions()\r\n-    #     for session in sessions:\r\n-    #         interface = session.SimpleAudioVolume\r\n-    #         if session.Process and session.Process.name() == self.process_name:\r\n-    #             # 1.0 is the max value, raise by decibels\r\n-    #             self.volume = min(1.0, self.volume+decibels)\r\n-    #             interface.SetMasterVolume(self.volume, None)\r\n-    #             print('Volume raised to', self.volume)  # debug\r\n-\r\n-def initiateAudioController():\r\n-    controller = []\r\n-\r\n-    chan1 = ['brave','Twitch']\r\n-    chan2 = ['Spotify','']\r\n-    chan3 = ['Discord','']\r\n-    chan4 = ['csgo','']\r\n-\r\n-    #channel 0 reserved for master volume\r\n-    #could be some kind of for loop for a list in a to create the individual channels\r\n-\r\n-    #channel 1 (browser?)\r\n-    controller.append(AudioController(chan1[0] + '.exe'))\r\n-    controller.append(AudioController(chan1[1] + '.exe'))\r\n-    #channel 2 (multimedia spotify netflix..)\r\n-    controller.append(AudioController(chan2[0] + '.exe'))\r\n-    controller.append(AudioController(chan2[1] + '.exe'))\r\n-\r\n-    #channel 3 \r\n-    controller.append(AudioController(chan3[0] + '.exe'))\r\n-    controller.append(AudioController(chan3[1] + '.exe'))\r\n-\r\n-    #channel 4 (for games)\r\n-    controller.append(AudioController(chan4[0] + '.exe'))\r\n-    controller.append(AudioController(chan4[1] + '.exe'))\r\n-\r\n-    return controller\r\n-\r\n-def main():\r\n-    controller = initiateAudioController()\r\n-\r\n-    devices = AudioUtilities.GetSpeakers()\r\n-    interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)\r\n-\r\n-    master = cast(interface, POINTER(IAudioEndpointVolume))\r\n-\r\n-    print('start')\r\n-    while True:\r\n-        try:\r\n-\r\n-            #waiting for serial data\r\n-            data = (ser.readline().rstrip()).decode()\r\n-            dataEval = eval('[' + data + ']')[0]\r\n-            print(dataEval)\r\n-            #potentiometer and switch data\r\n-            pot, sw = dataEval\r\n-            # print(pot)\r\n-\r\n-            for i in range(len(pot)):\r\n-                if i == 0:\r\n-                    masterVal = -78*exp(-3.97*pot[i])+1.452\r\n-                    master.SetMasterVolumeLevel(masterVal, None)\r\n-                elif i == 1:\r\n-                    #general media, brave, twitch? \r\n-                    controller[0].set_volume(pot[i])\r\n-                    controller[1].set_volume(pot[i]) \r\n-                elif i == 2:\r\n-                    #Spotify channel other media? (netflix?) \r\n-                    controller[2].set_volume(pot[i])\r\n-                    controller[3].set_volume(pot[i])\r\n-                elif i == 3:\r\n-                    #Discord channel\r\n-                    controller[4].set_volume(pot[i])\r\n-                    controller[5].set_volume(pot[i])\r\n-                    pass                    \r\n-                elif i == 4:\r\n-                    #gaming channel\r\n-                    controller[6].set_volume(pot[i])\r\n-                    controller[7].set_volume(pot[i])\r\n-                    pass\r\n-                else:\r\n-                    pass\r\n-\r\n-\r\n-            for i in range(len(sw)):\r\n-                #process only a keypress per time period?\r\n-\r\n-                \r\n-                #in time period set keypress to activate certain macros, probably \r\n-\r\n-                pass\r\n-\r\n-\r\n-        except:\r\n-            pass\r\n-\r\n-\r\n-\r\n-if __name__ == \"__main__\":\r\n-    main()\n-\r\n-from __future__ import print_function\r\n-\r\n-from ctypes import cast, POINTER\r\n-from comtypes import CLSCTX_ALL\r\n-from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume\r\n-\r\n-from pycaw.pycaw import AudioUtilities\r\n-\r\n-\r\n-from pynput.keyboard import Key, Controller #https://pypi.org/project/pynput/\r\n-\r\n-import serial\r\n-from time import sleep\r\n-\r\n-from math import log, exp\r\n-\r\n-from serial.serialwin32 import Serial\r\n-ser = serial.Serial('COM3', 115200, timeout=None)\r\n-\r\n-class AudioController(object):\r\n-    def __init__(self, process_name):\r\n-        self.process_name = process_name\r\n-        self.volume = self.process_volume()\r\n-\r\n-    def mute(self):\r\n-        sessions = AudioUtilities.GetAllSessions()\r\n-        for session in sessions:\r\n-            interface = session.SimpleAudioVolume\r\n-            if session.Process and session.Process.name() == self.process_name:\r\n-                interface.SetMute(1, None)\r\n-                print(self.process_name, 'has been muted.')  # debug\r\n-\r\n-    def unmute(self):\r\n-        sessions = AudioUtilities.GetAllSessions()\r\n-        for session in sessions:\r\n-            interface = session.SimpleAudioVolume\r\n-            if session.Process and session.Process.name() == self.process_name:\r\n-                interface.SetMute(0, None)\r\n-                print(self.process_name, 'has been unmuted.')  # debug\r\n-\r\n-    def process_volume(self):\r\n-        sessions = AudioUtilities.GetAllSessions()\r\n-        for session in sessions:\r\n-            interface = session.SimpleAudioVolume\r\n-            if session.Process and session.Process.name() == self.process_name:\r\n-                # print('Volume:', interface.GetMasterVolume())  # debug\r\n-                return interface.GetMasterVolume()\r\n-\r\n-    def set_volume(self, decibels):\r\n-        sessions = AudioUtilities.GetAllSessions()\r\n-        for session in sessions:\r\n-            interface = session.SimpleAudioVolume\r\n-            if session.Process and session.Process.name() == self.process_name:\r\n-                # only set volume in the range 0.0 to 1.0\r\n-                self.volume = min(1.0, max(0.0, decibels))\r\n-                interface.SetMasterVolume(self.volume, None)\r\n-                # print('Volume set to', self.volume)  # debug\r\n-\r\n-    # def decrease_volume(self, decibels):\r\n-    #     sessions = AudioUtilities.GetAllSessions()\r\n-    #     for session in sessions:\r\n-    #         interface = session.SimpleAudioVolume\r\n-    #         if session.Process and session.Process.name() == self.process_name:\r\n-    #             # 0.0 is the min value, reduce by decibels\r\n-    #             self.volume = max(0.0, self.volume-decibels)\r\n-    #             interface.SetMasterVolume(self.volume, None)\r\n-    #             print('Volume reduced to', self.volume)  # debug\r\n-\r\n-    # def increase_volume(self, decibels):\r\n-    #     sessions = AudioUtilities.GetAllSessions()\r\n-    #     for session in sessions:\r\n-    #         interface = session.SimpleAudioVolume\r\n-    #         if session.Process and session.Process.name() == self.process_name:\r\n-    #             # 1.0 is the max value, raise by decibels\r\n-    #             self.volume = min(1.0, self.volume+decibels)\r\n-    #             interface.SetMasterVolume(self.volume, None)\r\n-    #             print('Volume raised to', self.volume)  # debug\r\n-\r\n-def initiateAudioController():\r\n-    controller = []\r\n-\r\n-    chan1 = ['brave','Twitch']\r\n-    chan2 = ['Spotify','']\r\n-    chan3, chan3 = ['Discord','']\r\n-    chan4 = ['csgo','']\r\n-\r\n-    #channel 0 reserved for master volume\r\n-    #could be some kind of for loop for a list in a to create the individual channels\r\n-\r\n-    #channel 1 (browser?)\r\n-    controller.append(AudioController(chan1_1 + '.exe'))\r\n-    controller.append(AudioController(chan1_2 + '.exe'))\r\n-    #channel 2 (multimedia spotify netflix..)\r\n-    controller.append(AudioController(chan2_1 + '.exe'))\r\n-    controller.append(AudioController(chan2_2 + '.exe'))\r\n-\r\n-    #channel 3 \r\n-    controller.append(AudioController(chan3_1 + '.exe'))\r\n-    controller.append(AudioController(chan3_2 + '.exe'))\r\n-\r\n-    #channel 4 (for games)\r\n-    controller.append(AudioController(chan4_1 + '.exe'))\r\n-    controller.append(AudioController(chan4_2 + '.exe'))\r\n-\r\n-    return controller\r\n-\r\n-def main():\r\n-    controller = initiateAudioController()\r\n-\r\n-    devices = AudioUtilities.GetSpeakers()\r\n-    interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)\r\n-\r\n-    master = cast(interface, POINTER(IAudioEndpointVolume))\r\n-\r\n-    print('start')\r\n-    while True:\r\n-        try:\r\n-\r\n-            #waiting for serial data\r\n-            data = (ser.readline().rstrip()).decode()\r\n-            dataEval = eval('[' + data + ']')[0]\r\n-            print(dataEval)\r\n-            #potentiometer and switch data\r\n-            pot, sw = dataEval\r\n-            # print(pot)\r\n-\r\n-            for i in range(len(pot)):\r\n-                if i == 0:\r\n-                    masterVal = -78*exp(-3.97*pot[i])+1.452\r\n-                    master.SetMasterVolumeLevel(masterVal, None)\r\n-                elif i == 1:\r\n-                    #general media, brave, twitch? \r\n-                    controller[0].set_volume(pot[i])\r\n-                    controller[1].set_volume(pot[i]) \r\n-                elif i == 2:\r\n-                    #Spotify channel other media? (netflix?) \r\n-                    controller[2].set_volume(pot[i])\r\n-                    controller[3].set_volume(pot[i])\r\n-                elif i == 3:\r\n-                    #Discord channel\r\n-                    controller[4].set_volume(pot[i])\r\n-                    controller[5].set_volume(pot[i])\r\n-                    pass                    \r\n-                elif i == 4:\r\n-                    #gaming channel\r\n-                    controller[6].set_volume(pot[i])\r\n-                    controller[7].set_volume(pot[i])\r\n-                    pass\r\n-                else:\r\n-                    pass\r\n-\r\n-\r\n-            for i in range(len(sw)):\r\n-                #process only a keypress per time period?\r\n-\r\n-                \r\n-                #in time period set keypress to activate certain macros, probably \r\n-\r\n-                pass\r\n-\r\n-\r\n-        except:\r\n-            pass\r\n-\r\n-\r\n-\r\n-if __name__ == \"__main__\":\r\n     main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1621813326997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,8 +77,9 @@\n     #             interface.SetMasterVolume(self.volume, None)\r\n     #             print('Volume raised to', self.volume)  # debug\r\n \r\n def initiateAudioController():\r\n+    global chan = []\r\n     controller = []\r\n \r\n     chan1 = ['brave','Twitch']\r\n     chan2 = ['Spotify','']\r\n"
                },
                {
                    "date": 1621813348305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,8 @@\n     #             interface.SetMasterVolume(self.volume, None)\r\n     #             print('Volume raised to', self.volume)  # debug\r\n \r\n def initiateAudioController():\r\n-    global chan = []\r\n     controller = []\r\n \r\n     chan1 = ['brave','Twitch']\r\n     chan2 = ['Spotify','']\r\n@@ -106,9 +105,9 @@\n     # #channel 4 (for games)\r\n     # controller.append(AudioController(chan4[0] + '.exe'))\r\n     # controller.append(AudioController(chan4[1] + '.exe'))\r\n \r\n-    return controller\r\n+    return controller, chan \r\n \r\n def main():\r\n     controller = initiateAudioController()\r\n \r\n"
                },
                {
                    "date": 1621813366767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,173 @@\n+\r\n+from __future__ import print_function\r\n+\r\n+from ctypes import cast, POINTER\r\n+from comtypes import CLSCTX_ALL\r\n+from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume\r\n+\r\n+from pycaw.pycaw import AudioUtilities\r\n+\r\n+\r\n+from pynput.keyboard import Key, Controller #https://pypi.org/project/pynput/\r\n+\r\n+import serial\r\n+from time import sleep\r\n+\r\n+from math import log, exp\r\n+\r\n+from serial.serialwin32 import Serial\r\n+ser = serial.Serial('COM3', 115200, timeout=None)\r\n+\r\n+class AudioController(object):\r\n+    def __init__(self, process_name):\r\n+        self.process_name = process_name\r\n+        self.volume = self.process_volume()\r\n+\r\n+    def mute(self):\r\n+        sessions = AudioUtilities.GetAllSessions()\r\n+        for session in sessions:\r\n+            interface = session.SimpleAudioVolume\r\n+            if session.Process and session.Process.name() == self.process_name:\r\n+                interface.SetMute(1, None)\r\n+                print(self.process_name, 'has been muted.')  # debug\r\n+\r\n+    def unmute(self):\r\n+        sessions = AudioUtilities.GetAllSessions()\r\n+        for session in sessions:\r\n+            interface = session.SimpleAudioVolume\r\n+            if session.Process and session.Process.name() == self.process_name:\r\n+                interface.SetMute(0, None)\r\n+                print(self.process_name, 'has been unmuted.')  # debug\r\n+\r\n+    def process_volume(self):\r\n+        sessions = AudioUtilities.GetAllSessions()\r\n+        for session in sessions:\r\n+            interface = session.SimpleAudioVolume\r\n+            if session.Process and session.Process.name() == self.process_name:\r\n+                # print('Volume:', interface.GetMasterVolume())  # debug\r\n+                return interface.GetMasterVolume()\r\n+\r\n+    def set_volume(self, decibels):\r\n+        sessions = AudioUtilities.GetAllSessions()\r\n+        for session in sessions:\r\n+            interface = session.SimpleAudioVolume\r\n+            if session.Process and session.Process.name() == self.process_name:\r\n+                # only set volume in the range 0.0 to 1.0\r\n+                self.volume = min(1.0, max(0.0, decibels))\r\n+                interface.SetMasterVolume(self.volume, None)\r\n+                # print('Volume set to', self.volume)  # debug\r\n+\r\n+    # def decrease_volume(self, decibels):\r\n+    #     sessions = AudioUtilities.GetAllSessions()\r\n+    #     for session in sessions:\r\n+    #         interface = session.SimpleAudioVolume\r\n+    #         if session.Process and session.Process.name() == self.process_name:\r\n+    #             # 0.0 is the min value, reduce by decibels\r\n+    #             self.volume = max(0.0, self.volume-decibels)\r\n+    #             interface.SetMasterVolume(self.volume, None)\r\n+    #             print('Volume reduced to', self.volume)  # debug\r\n+\r\n+    # def increase_volume(self, decibels):\r\n+    #     sessions = AudioUtilities.GetAllSessions()\r\n+    #     for session in sessions:\r\n+    #         interface = session.SimpleAudioVolume\r\n+    #         if session.Process and session.Process.name() == self.process_name:\r\n+    #             # 1.0 is the max value, raise by decibels\r\n+    #             self.volume = min(1.0, self.volume+decibels)\r\n+    #             interface.SetMasterVolume(self.volume, None)\r\n+    #             print('Volume raised to', self.volume)  # debug\r\n+\r\n+def initiateAudioController():\r\n+    controller = []\r\n+\r\n+    chan1 = ['brave','Twitch']\r\n+    chan2 = ['Spotify','']\r\n+    chan3 = ['Discord','']\r\n+    chan4 = ['csgo','']\r\n+    chan = [chan1,chan2,chan3,chan4]\r\n+\r\n+    #channel 0 reserved for master volume\r\n+    #could be some kind of for loop for a list in a to create the individual channels\r\n+\r\n+    #channel 1 (browser?)\r\n+    for i in range(len(chan)):\r\n+        for j in range(len(chan[i])):\r\n+            controller.append(AudioController(chan[i][j] + '.exe'))\r\n+    #     controller.append(AudioController(chan[1] + '.exe'))\r\n+    # #channel 2 (multimedia spotify netflix..)\r\n+    # controller.append(AudioController(chan2[0] + '.exe'))\r\n+    # controller.append(AudioController(chan2[1] + '.exe'))\r\n+\r\n+    # #channel 3 \r\n+    # controller.append(AudioController(chan3[0] + '.exe'))\r\n+    # controller.append(AudioController(chan3[1] + '.exe'))\r\n+\r\n+    # #channel 4 (for games)\r\n+    # controller.append(AudioController(chan4[0] + '.exe'))\r\n+    # controller.append(AudioController(chan4[1] + '.exe'))\r\n+\r\n+    return controller, chan \r\n+\r\n+def main():\r\n+    controller, chan = initiateAudioController()\r\n+\r\n+    devices = AudioUtilities.GetSpeakers()\r\n+    interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)\r\n+\r\n+    master = cast(interface, POINTER(IAudioEndpointVolume))\r\n+\r\n+    print('start')\r\n+    while True:\r\n+        try:\r\n+\r\n+            #waiting for serial data\r\n+            data = (ser.readline().rstrip()).decode()\r\n+            dataEval = eval('[' + data + ']')[0]\r\n+            print(dataEval)\r\n+            #potentiometer and switch data\r\n+            pot, sw = dataEval\r\n+            # print(pot)\r\n+\r\n+            for i in range(len(pot)):\r\n+                if i == 0:\r\n+                    masterVal = -78*exp(-3.97*pot[i])+1.452\r\n+                    master.SetMasterVolumeLevel(masterVal, None)\r\n+                elif i == 1:\r\n+                    #general media, brave, twitch? \r\n+                    for k in range(len(chan[0])):\r\n+                        controller[k].set_volume(pot[i])\r\n+                        # controller[1].set_volume(pot[i]) \r\n+                elif i == 2:\r\n+                    #Spotify channel other media? (netflix?) \r\n+                    controller[2].set_volume(pot[i])\r\n+                    controller[3].set_volume(pot[i])\r\n+                elif i == 3:\r\n+                    #Discord channel\r\n+                    controller[4].set_volume(pot[i])\r\n+                    controller[5].set_volume(pot[i])\r\n+                    pass                    \r\n+                elif i == 4:\r\n+                    #gaming channel\r\n+                    controller[6].set_volume(pot[i])\r\n+                    controller[7].set_volume(pot[i])\r\n+                    pass\r\n+                else:\r\n+                    pass\r\n+\r\n+\r\n+            for i in range(len(sw)):\r\n+                #process only a keypress per time period?\r\n+\r\n+                \r\n+                #in time period set keypress to activate certain macros, probably \r\n+\r\n+                pass\r\n+\r\n+\r\n+        except:\r\n+            pass\r\n+\r\n+\r\n+\r\n+if __name__ == \"__main__\":\r\n+    main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1621813595456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,8 +109,9 @@\n     return controller, chan \r\n \r\n def main():\r\n     controller, chan = initiateAudioController()\r\n+    countPrograms = sum([len(element) for element in chan])\r\n \r\n     devices = AudioUtilities.GetSpeakers()\r\n     interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)\r\n \r\n@@ -131,186 +132,13 @@\n             for i in range(len(pot)):\r\n                 if i == 0:\r\n                     masterVal = -78*exp(-3.97*pot[i])+1.452\r\n                     master.SetMasterVolumeLevel(masterVal, None)\r\n-                elif i == 1:\r\n-                    #general media, brave, twitch? \r\n-                    for k in range(len(chan[0])):\r\n-                        controller[k].set_volume(pot[i])\r\n-                        # controller[1].set_volume(pot[i]) \r\n-                elif i == 2:\r\n-                    #Spotify channel other media? (netflix?) \r\n-                    controller[2].set_volume(pot[i])\r\n-                    controller[3].set_volume(pot[i])\r\n-                elif i == 3:\r\n-                    #Discord channel\r\n-                    controller[4].set_volume(pot[i])\r\n-                    controller[5].set_volume(pot[i])\r\n-                    pass                    \r\n-                elif i == 4:\r\n-                    #gaming channel\r\n-                    controller[6].set_volume(pot[i])\r\n-                    controller[7].set_volume(pot[i])\r\n-                    pass\r\n-                else:\r\n-                    pass\r\n-\r\n-\r\n-            for i in range(len(sw)):\r\n-                #process only a keypress per time period?\r\n-\r\n                 \r\n-                #in time period set keypress to activate certain macros, probably \r\n-\r\n-                pass\r\n-\r\n-\r\n-        except:\r\n-            pass\r\n-\r\n-\r\n-\r\n-if __name__ == \"__main__\":\r\n-    main()\n-\r\n-from __future__ import print_function\r\n-\r\n-from ctypes import cast, POINTER\r\n-from comtypes import CLSCTX_ALL\r\n-from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume\r\n-\r\n-from pycaw.pycaw import AudioUtilities\r\n-\r\n-\r\n-from pynput.keyboard import Key, Controller #https://pypi.org/project/pynput/\r\n-\r\n-import serial\r\n-from time import sleep\r\n-\r\n-from math import log, exp\r\n-\r\n-from serial.serialwin32 import Serial\r\n-ser = serial.Serial('COM3', 115200, timeout=None)\r\n-\r\n-class AudioController(object):\r\n-    def __init__(self, process_name):\r\n-        self.process_name = process_name\r\n-        self.volume = self.process_volume()\r\n-\r\n-    def mute(self):\r\n-        sessions = AudioUtilities.GetAllSessions()\r\n-        for session in sessions:\r\n-            interface = session.SimpleAudioVolume\r\n-            if session.Process and session.Process.name() == self.process_name:\r\n-                interface.SetMute(1, None)\r\n-                print(self.process_name, 'has been muted.')  # debug\r\n-\r\n-    def unmute(self):\r\n-        sessions = AudioUtilities.GetAllSessions()\r\n-        for session in sessions:\r\n-            interface = session.SimpleAudioVolume\r\n-            if session.Process and session.Process.name() == self.process_name:\r\n-                interface.SetMute(0, None)\r\n-                print(self.process_name, 'has been unmuted.')  # debug\r\n-\r\n-    def process_volume(self):\r\n-        sessions = AudioUtilities.GetAllSessions()\r\n-        for session in sessions:\r\n-            interface = session.SimpleAudioVolume\r\n-            if session.Process and session.Process.name() == self.process_name:\r\n-                # print('Volume:', interface.GetMasterVolume())  # debug\r\n-                return interface.GetMasterVolume()\r\n-\r\n-    def set_volume(self, decibels):\r\n-        sessions = AudioUtilities.GetAllSessions()\r\n-        for session in sessions:\r\n-            interface = session.SimpleAudioVolume\r\n-            if session.Process and session.Process.name() == self.process_name:\r\n-                # only set volume in the range 0.0 to 1.0\r\n-                self.volume = min(1.0, max(0.0, decibels))\r\n-                interface.SetMasterVolume(self.volume, None)\r\n-                # print('Volume set to', self.volume)  # debug\r\n-\r\n-    # def decrease_volume(self, decibels):\r\n-    #     sessions = AudioUtilities.GetAllSessions()\r\n-    #     for session in sessions:\r\n-    #         interface = session.SimpleAudioVolume\r\n-    #         if session.Process and session.Process.name() == self.process_name:\r\n-    #             # 0.0 is the min value, reduce by decibels\r\n-    #             self.volume = max(0.0, self.volume-decibels)\r\n-    #             interface.SetMasterVolume(self.volume, None)\r\n-    #             print('Volume reduced to', self.volume)  # debug\r\n-\r\n-    # def increase_volume(self, decibels):\r\n-    #     sessions = AudioUtilities.GetAllSessions()\r\n-    #     for session in sessions:\r\n-    #         interface = session.SimpleAudioVolume\r\n-    #         if session.Process and session.Process.name() == self.process_name:\r\n-    #             # 1.0 is the max value, raise by decibels\r\n-    #             self.volume = min(1.0, self.volume+decibels)\r\n-    #             interface.SetMasterVolume(self.volume, None)\r\n-    #             print('Volume raised to', self.volume)  # debug\r\n-\r\n-def initiateAudioController():\r\n-    controller = []\r\n-\r\n-    chan1 = ['brave','Twitch']\r\n-    chan2 = ['Spotify','']\r\n-    chan3 = ['Discord','']\r\n-    chan4 = ['csgo','']\r\n-    chan = [chan1,chan2,chan3,chan4]\r\n-\r\n-    #channel 0 reserved for master volume\r\n-    #could be some kind of for loop for a list in a to create the individual channels\r\n-\r\n-    #channel 1 (browser?)\r\n-    for i in range(len(chan)):\r\n-        for j in range(len(chan[i])):\r\n-            controller.append(AudioController(chan[i][j] + '.exe'))\r\n-    #     controller.append(AudioController(chan[1] + '.exe'))\r\n-    # #channel 2 (multimedia spotify netflix..)\r\n-    # controller.append(AudioController(chan2[0] + '.exe'))\r\n-    # controller.append(AudioController(chan2[1] + '.exe'))\r\n-\r\n-    # #channel 3 \r\n-    # controller.append(AudioController(chan3[0] + '.exe'))\r\n-    # controller.append(AudioController(chan3[1] + '.exe'))\r\n-\r\n-    # #channel 4 (for games)\r\n-    # controller.append(AudioController(chan4[0] + '.exe'))\r\n-    # controller.append(AudioController(chan4[1] + '.exe'))\r\n-\r\n-    return controller, chan \r\n-\r\n-def main():\r\n-    controller = initiateAudioController()\r\n-\r\n-    devices = AudioUtilities.GetSpeakers()\r\n-    interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)\r\n-\r\n-    master = cast(interface, POINTER(IAudioEndpointVolume))\r\n-\r\n-    print('start')\r\n-    while True:\r\n-        try:\r\n-\r\n-            #waiting for serial data\r\n-            data = (ser.readline().rstrip()).decode()\r\n-            dataEval = eval('[' + data + ']')[0]\r\n-            print(dataEval)\r\n-            #potentiometer and switch data\r\n-            pot, sw = dataEval\r\n-            # print(pot)\r\n-\r\n-            for i in range(len(pot)):\r\n-                if i == 0:\r\n-                    masterVal = -78*exp(-3.97*pot[i])+1.452\r\n-                    master.SetMasterVolumeLevel(masterVal, None)\r\n-                elif i == 1:\r\n+                for j in range(1,len()):\r\n                     #general media, brave, twitch? \r\n                     for k in range(len(chan[0])):\r\n-                        controller[k].set_volume(pot[i])\r\n-                        # controller[1].set_volume(pot[i]) \r\n+                        controller[k].set_volume(pot[j])\r\n                 elif i == 2:\r\n                     #Spotify channel other media? (netflix?) \r\n                     controller[2].set_volume(pot[i])\r\n                     controller[3].set_volume(pot[i])\r\n"
                },
                {
                    "date": 1621813600946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,8 +110,9 @@\n \r\n def main():\r\n     controller, chan = initiateAudioController()\r\n     countPrograms = sum([len(element) for element in chan])\r\n+    print(countPrograms)\r\n \r\n     devices = AudioUtilities.GetSpeakers()\r\n     interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)\r\n \r\n"
                },
                {
                    "date": 1621813608028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,26 +134,26 @@\n                 if i == 0:\r\n                     masterVal = -78*exp(-3.97*pot[i])+1.452\r\n                     master.SetMasterVolumeLevel(masterVal, None)\r\n                 \r\n-                for j in range(1,len()):\r\n-                    #general media, brave, twitch? \r\n-                    for k in range(len(chan[0])):\r\n-                        controller[k].set_volume(pot[j])\r\n-                elif i == 2:\r\n-                    #Spotify channel other media? (netflix?) \r\n-                    controller[2].set_volume(pot[i])\r\n-                    controller[3].set_volume(pot[i])\r\n-                elif i == 3:\r\n-                    #Discord channel\r\n-                    controller[4].set_volume(pot[i])\r\n-                    controller[5].set_volume(pot[i])\r\n-                    pass                    \r\n-                elif i == 4:\r\n-                    #gaming channel\r\n-                    controller[6].set_volume(pot[i])\r\n-                    controller[7].set_volume(pot[i])\r\n-                    pass\r\n+                # for j in range(1,len()):\r\n+                #     #general media, brave, twitch? \r\n+                #     for k in range(len(chan[0])):\r\n+                #         controller[k].set_volume(pot[j])\r\n+                # elif i == 2:\r\n+                #     #Spotify channel other media? (netflix?) \r\n+                #     controller[2].set_volume(pot[i])\r\n+                #     controller[3].set_volume(pot[i])\r\n+                # elif i == 3:\r\n+                #     #Discord channel\r\n+                #     controller[4].set_volume(pot[i])\r\n+                #     controller[5].set_volume(pot[i])\r\n+                #     pass                    \r\n+                # elif i == 4:\r\n+                #     #gaming channel\r\n+                #     controller[6].set_volume(pot[i])\r\n+                #     controller[7].set_volume(pot[i])\r\n+                #     pass\r\n                 else:\r\n                     pass\r\n \r\n \r\n"
                },
                {
                    "date": 1621813665938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,8 @@\n \r\n def main():\r\n     controller, chan = initiateAudioController()\r\n     countPrograms = sum([len(element) for element in chan])\r\n-    print(countPrograms)\r\n \r\n     devices = AudioUtilities.GetSpeakers()\r\n     interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)\r\n \r\n@@ -134,12 +133,12 @@\n                 if i == 0:\r\n                     masterVal = -78*exp(-3.97*pot[i])+1.452\r\n                     master.SetMasterVolumeLevel(masterVal, None)\r\n                 \r\n-                # for j in range(1,len()):\r\n-                #     #general media, brave, twitch? \r\n-                #     for k in range(len(chan[0])):\r\n-                #         controller[k].set_volume(pot[j])\r\n+                for j in range(1,len()):\r\n+                    #general media, brave, twitch? \r\n+                    for k in range(len(chan[0])):\r\n+                        controller[k].set_volume(pot[j])\r\n                 # elif i == 2:\r\n                 #     #Spotify channel other media? (netflix?) \r\n                 #     controller[2].set_volume(pot[i])\r\n                 #     controller[3].set_volume(pot[i])\r\n"
                },
                {
                    "date": 1621813671323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n                     master.SetMasterVolumeLevel(masterVal, None)\r\n                 \r\n                 for j in range(1,len()):\r\n                     #general media, brave, twitch? \r\n-                    for k in range(len(chan[0])):\r\n+                    for k in range(len(countPrograms)):\r\n                         controller[k].set_volume(pot[j])\r\n                 # elif i == 2:\r\n                 #     #Spotify channel other media? (netflix?) \r\n                 #     controller[2].set_volume(pot[i])\r\n"
                },
                {
                    "date": 1621813694228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n                     master.SetMasterVolumeLevel(masterVal, None)\r\n                 \r\n                 for j in range(1,len()):\r\n                     #general media, brave, twitch? \r\n-                    for k in range(len(countPrograms)):\r\n+                    for k in range(countPrograms):\r\n                         controller[k].set_volume(pot[j])\r\n                 # elif i == 2:\r\n                 #     #Spotify channel other media? (netflix?) \r\n                 #     controller[2].set_volume(pot[i])\r\n"
                },
                {
                    "date": 1621813723113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n                 if i == 0:\r\n                     masterVal = -78*exp(-3.97*pot[i])+1.452\r\n                     master.SetMasterVolumeLevel(masterVal, None)\r\n                 \r\n-                for j in range(1,len()):\r\n+                for j in range(1,len(chan)):\r\n                     #general media, brave, twitch? \r\n                     for k in range(countPrograms):\r\n                         controller[k].set_volume(pot[j])\r\n                 # elif i == 2:\r\n"
                },
                {
                    "date": 1621813834415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,35 +83,32 @@\n     chan1 = ['brave','Twitch']\r\n     chan2 = ['Spotify','']\r\n     chan3 = ['Discord','']\r\n     chan4 = ['csgo','']\r\n-    chan = [chan1,chan2,chan3,chan4]\r\n \r\n     #channel 0 reserved for master volume\r\n     #could be some kind of for loop for a list in a to create the individual channels\r\n \r\n     #channel 1 (browser?)\r\n-    for i in range(len(chan)):\r\n-        for j in range(len(chan[i])):\r\n-            controller.append(AudioController(chan[i][j] + '.exe'))\r\n-    #     controller.append(AudioController(chan[1] + '.exe'))\r\n-    # #channel 2 (multimedia spotify netflix..)\r\n-    # controller.append(AudioController(chan2[0] + '.exe'))\r\n-    # controller.append(AudioController(chan2[1] + '.exe'))\r\n+    for i in range chan1\r\n+    controller.append(AudioController(chan1[0] + '.exe'))\r\n+    controller.append(AudioController(chan1[1] + '.exe'))\r\n+    #channel 2 (multimedia spotify netflix..)\r\n+    controller.append(AudioController(chan2[0] + '.exe'))\r\n+    controller.append(AudioController(chan2[1] + '.exe'))\r\n \r\n-    # #channel 3 \r\n-    # controller.append(AudioController(chan3[0] + '.exe'))\r\n-    # controller.append(AudioController(chan3[1] + '.exe'))\r\n+    #channel 3 \r\n+    controller.append(AudioController(chan3[0] + '.exe'))\r\n+    controller.append(AudioController(chan3[1] + '.exe'))\r\n \r\n-    # #channel 4 (for games)\r\n-    # controller.append(AudioController(chan4[0] + '.exe'))\r\n-    # controller.append(AudioController(chan4[1] + '.exe'))\r\n+    #channel 4 (for games)\r\n+    controller.append(AudioController(chan4[0] + '.exe'))\r\n+    controller.append(AudioController(chan4[1] + '.exe'))\r\n \r\n-    return controller, chan \r\n+    return controller\r\n \r\n def main():\r\n-    controller, chan = initiateAudioController()\r\n-    countPrograms = sum([len(element) for element in chan])\r\n+    controller = initiateAudioController()\r\n \r\n     devices = AudioUtilities.GetSpeakers()\r\n     interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)\r\n \r\n@@ -132,27 +129,26 @@\n             for i in range(len(pot)):\r\n                 if i == 0:\r\n                     masterVal = -78*exp(-3.97*pot[i])+1.452\r\n                     master.SetMasterVolumeLevel(masterVal, None)\r\n-                \r\n-                for j in range(1,len(chan)):\r\n+                elif i == 1:\r\n                     #general media, brave, twitch? \r\n-                    for k in range(countPrograms):\r\n-                        controller[k].set_volume(pot[j])\r\n-                # elif i == 2:\r\n-                #     #Spotify channel other media? (netflix?) \r\n-                #     controller[2].set_volume(pot[i])\r\n-                #     controller[3].set_volume(pot[i])\r\n-                # elif i == 3:\r\n-                #     #Discord channel\r\n-                #     controller[4].set_volume(pot[i])\r\n-                #     controller[5].set_volume(pot[i])\r\n-                #     pass                    \r\n-                # elif i == 4:\r\n-                #     #gaming channel\r\n-                #     controller[6].set_volume(pot[i])\r\n-                #     controller[7].set_volume(pot[i])\r\n-                #     pass\r\n+                    controller[0].set_volume(pot[i])\r\n+                    controller[1].set_volume(pot[i]) \r\n+                elif i == 2:\r\n+                    #Spotify channel other media? (netflix?) \r\n+                    controller[2].set_volume(pot[i])\r\n+                    controller[3].set_volume(pot[i])\r\n+                elif i == 3:\r\n+                    #Discord channel\r\n+                    controller[4].set_volume(pot[i])\r\n+                    controller[5].set_volume(pot[i])\r\n+                    pass                    \r\n+                elif i == 4:\r\n+                    #gaming channel\r\n+                    controller[6].set_volume(pot[i])\r\n+                    controller[7].set_volume(pot[i])\r\n+                    pass\r\n                 else:\r\n                     pass\r\n \r\n \r\n"
                },
                {
                    "date": 1621813849729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,8 @@\n     #channel 0 reserved for master volume\r\n     #could be some kind of for loop for a list in a to create the individual channels\r\n \r\n     #channel 1 (browser?)\r\n-    for i in range chan1\r\n     controller.append(AudioController(chan1[0] + '.exe'))\r\n     controller.append(AudioController(chan1[1] + '.exe'))\r\n     #channel 2 (multimedia spotify netflix..)\r\n     controller.append(AudioController(chan2[0] + '.exe'))\r\n"
                },
                {
                    "date": 1621813882440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,30 +79,30 @@\n \r\n def initiateAudioController():\r\n     controller = []\r\n \r\n-    chan1 = ['brave','Twitch']\r\n-    chan2 = ['Spotify','']\r\n-    chan3 = ['Discord','']\r\n-    chan4 = ['csgo','']\r\n+    chan1_1, chan1_2 = 'brave','Twitch'\r\n+    chan2_1, chan2_2 = 'Spotify',''\r\n+    chan3_1, chan3_2 = 'Discord',''\r\n+    chan4_1, chan4_2 = 'csgo',''\r\n \r\n     #channel 0 reserved for master volume\r\n     #could be some kind of for loop for a list in a to create the individual channels\r\n-\r\n+    \r\n     #channel 1 (browser?)\r\n-    controller.append(AudioController(chan1[0] + '.exe'))\r\n-    controller.append(AudioController(chan1[1] + '.exe'))\r\n+    controller.append(AudioController(chan1_1 + '.exe'))\r\n+    controller.append(AudioController(chan1_2 + '.exe'))\r\n     #channel 2 (multimedia spotify netflix..)\r\n-    controller.append(AudioController(chan2[0] + '.exe'))\r\n-    controller.append(AudioController(chan2[1] + '.exe'))\r\n+    controller.append(AudioController(chan2_1 + '.exe'))\r\n+    controller.append(AudioController(chan2_2 + '.exe'))\r\n \r\n     #channel 3 \r\n-    controller.append(AudioController(chan3[0] + '.exe'))\r\n-    controller.append(AudioController(chan3[1] + '.exe'))\r\n+    controller.append(AudioController(chan3_1 + '.exe'))\r\n+    controller.append(AudioController(chan3_2 + '.exe'))\r\n \r\n     #channel 4 (for games)\r\n-    controller.append(AudioController(chan4[0] + '.exe'))\r\n-    controller.append(AudioController(chan4[1] + '.exe'))\r\n+    controller.append(AudioController(chan4_1 + '.exe'))\r\n+    controller.append(AudioController(chan4_2 + '.exe'))\r\n \r\n     return controller\r\n \r\n def main():\r\n"
                },
                {
                    "date": 1621968538146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \r\n from pynput.keyboard import Key, Controller #https://pypi.org/project/pynput/\r\n \r\n import serial\r\n-from time import sleep\r\n+from time import sleep, time\r\n \r\n from math import log, exp\r\n \r\n from serial.serialwin32 import Serial\r\n@@ -149,12 +149,17 @@\n                     pass\r\n                 else:\r\n                     pass\r\n \r\n-\r\n+            sw_time_now = time()\r\n             for i in range(len(sw)):\r\n                 #process only a keypress per time period?\r\n-\r\n+                # time_recieved_data \r\n+                if swCurr == swPrev: \r\n+                    \r\n+                    time_recieved_data > 1s:\r\n+                if \r\n+                    sw[0] = \r\n                 \r\n                 #in time period set keypress to activate certain macros, probably \r\n \r\n                 pass\r\n"
                },
                {
                    "date": 1621968559201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,10 +162,10 @@\n                 \r\n                 #in time period set keypress to activate certain macros, probably \r\n \r\n                 pass\r\n+            swPrev = sw\r\n \r\n-\r\n         except:\r\n             pass\r\n \r\n \r\n"
                },
                {
                    "date": 1621968585312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,8 +112,10 @@\n     interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)\r\n \r\n     master = cast(interface, POINTER(IAudioEndpointVolume))\r\n \r\n+    swPrev = []\r\n+\r\n     print('start')\r\n     while True:\r\n         try:\r\n \r\n"
                },
                {
                    "date": 1622062174598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,18 +150,19 @@\n                     controller[7].set_volume(pot[i])\r\n                     pass\r\n                 else:\r\n                     pass\r\n-\r\n-            sw_time_now = time()\r\n+            \r\n+            if time_check = 0:\r\n+                sw_time_now = time()\r\n             for i in range(len(sw)):\r\n                 #process only a keypress per time period?\r\n                 # time_recieved_data \r\n-                if swCurr == swPrev: \r\n+                # if sw == swPrev: \r\n                     \r\n-                    time_recieved_data > 1s:\r\n-                if \r\n-                    sw[0] = \r\n+                #     time_recieved_data > 1s:\r\n+                # if \r\n+                #     sw[0] = \r\n                 \r\n                 #in time period set keypress to activate certain macros, probably \r\n \r\n                 pass\r\n"
                },
                {
                    "date": 1622062181812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,11 +151,11 @@\n                     pass\r\n                 else:\r\n                     pass\r\n             \r\n-            if time_check = 0:\r\n-                sw_time_now = time()\r\n-            for i in range(len(sw)):\r\n+            # if time_check = 0:\r\n+            #     sw_time_now = time()\r\n+            # for i in range(len(sw)):\r\n                 #process only a keypress per time period?\r\n                 # time_recieved_data \r\n                 # if sw == swPrev: \r\n                     \r\n"
                },
                {
                    "date": 1622062187255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,10 +164,10 @@\n                 #     sw[0] = \r\n                 \r\n                 #in time period set keypress to activate certain macros, probably \r\n \r\n-                pass\r\n-            swPrev = sw\r\n+            #     pass\r\n+            # swPrev = sw\r\n \r\n         except:\r\n             pass\r\n \r\n"
                }
            ],
            "date": 1621811391768,
            "name": "Commit-0",
            "content": "\r\nfrom __future__ import print_function\r\n\r\nfrom ctypes import cast, POINTER\r\nfrom comtypes import CLSCTX_ALL\r\nfrom pycaw.pycaw import AudioUtilities, IAudioEndpointVolume\r\n\r\nfrom pycaw.pycaw import AudioUtilities\r\n\r\n\r\nfrom pynput.keyboard import Key, Controller #https://pypi.org/project/pynput/\r\n\r\n\r\n\r\nimport serial\r\nfrom time import sleep\r\n\r\nfrom math import log, exp\r\n\r\nfrom serial.serialwin32 import Serial\r\nser = serial.Serial('COM3', 115200, timeout=None)\r\n\r\nclass AudioController(object):\r\n    def __init__(self, process_name):\r\n        self.process_name = process_name\r\n        self.volume = self.process_volume()\r\n\r\n    def mute(self):\r\n        sessions = AudioUtilities.GetAllSessions()\r\n        for session in sessions:\r\n            interface = session.SimpleAudioVolume\r\n            if session.Process and session.Process.name() == self.process_name:\r\n                interface.SetMute(1, None)\r\n                print(self.process_name, 'has been muted.')  # debug\r\n\r\n    def unmute(self):\r\n        sessions = AudioUtilities.GetAllSessions()\r\n        for session in sessions:\r\n            interface = session.SimpleAudioVolume\r\n            if session.Process and session.Process.name() == self.process_name:\r\n                interface.SetMute(0, None)\r\n                print(self.process_name, 'has been unmuted.')  # debug\r\n\r\n    def process_volume(self):\r\n        sessions = AudioUtilities.GetAllSessions()\r\n        for session in sessions:\r\n            interface = session.SimpleAudioVolume\r\n            if session.Process and session.Process.name() == self.process_name:\r\n                # print('Volume:', interface.GetMasterVolume())  # debug\r\n                return interface.GetMasterVolume()\r\n\r\n    def set_volume(self, decibels):\r\n        sessions = AudioUtilities.GetAllSessions()\r\n        for session in sessions:\r\n            interface = session.SimpleAudioVolume\r\n            if session.Process and session.Process.name() == self.process_name:\r\n                # only set volume in the range 0.0 to 1.0\r\n                self.volume = min(1.0, max(0.0, decibels))\r\n                interface.SetMasterVolume(self.volume, None)\r\n                # print('Volume set to', self.volume)  # debug\r\n\r\n    # def decrease_volume(self, decibels):\r\n    #     sessions = AudioUtilities.GetAllSessions()\r\n    #     for session in sessions:\r\n    #         interface = session.SimpleAudioVolume\r\n    #         if session.Process and session.Process.name() == self.process_name:\r\n    #             # 0.0 is the min value, reduce by decibels\r\n    #             self.volume = max(0.0, self.volume-decibels)\r\n    #             interface.SetMasterVolume(self.volume, None)\r\n    #             print('Volume reduced to', self.volume)  # debug\r\n\r\n    # def increase_volume(self, decibels):\r\n    #     sessions = AudioUtilities.GetAllSessions()\r\n    #     for session in sessions:\r\n    #         interface = session.SimpleAudioVolume\r\n    #         if session.Process and session.Process.name() == self.process_name:\r\n    #             # 1.0 is the max value, raise by decibels\r\n    #             self.volume = min(1.0, self.volume+decibels)\r\n    #             interface.SetMasterVolume(self.volume, None)\r\n    #             print('Volume raised to', self.volume)  # debug\r\n\r\n\r\ndef initiateAudioController():\r\n    controller = []\r\n\r\n    chan1_1, chan1_2 = 'brave','Twitch'\r\n    chan2_1, chan2_2 = 'Spotify',''\r\n    chan3_1, chan3_2 = 'Discord',''\r\n    chan4_1, chan4_2 = 'csgo',''\r\n\r\n    #channel 0 reserved for master volume\r\n    #channel 1 \r\n    controller.append(AudioController(chan1_1 + '.exe'))\r\n    controller.append(AudioController(chan1_2 + '.exe'))\r\n    #channel 2\r\n    controller.append(AudioController(chan2_1 + '.exe'))\r\n    controller.append(AudioController(chan2_2 + '.exe'))\r\n\r\n    #channel 3\r\n    controller.append(AudioController(chan3_1 + '.exe'))\r\n    controller.append(AudioController(chan3_2 + '.exe'))\r\n\r\n    #channel 4\r\n    controller.append(AudioController(chan4_1 + '.exe'))\r\n    controller.append(AudioController(chan4_2 + '.exe'))\r\n\r\n    return controller\r\n\r\ndef main():\r\n    controller = initiateAudioController()\r\n\r\n    devices = AudioUtilities.GetSpeakers()\r\n    interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)\r\n\r\n    master = cast(interface, POINTER(IAudioEndpointVolume))\r\n\r\n    print('start')\r\n    while True:\r\n        try:\r\n\r\n            #waiting for serial data\r\n            data = (ser.readline().rstrip()).decode()\r\n            dataEval = eval('[' + data + ']')[0]\r\n            print(dataEval)\r\n            #potentiometer and switch data\r\n            pot, sw = dataEval\r\n            # print(pot)\r\n\r\n            for i in range(len(pot)):\r\n                if pot[i] <= 0.009:\r\n                    pot[i] == 0\r\n                if i == 0:\r\n                    masterVal = -78*exp(-3.97*pot[i])+1.452\r\n                    master.SetMasterVolumeLevel(masterVal, None)\r\n                elif i == 1:\r\n                    #general media, brave, twitch? \r\n                    controller[0].set_volume(pot[i])\r\n                    controller[1].set_volume(pot[i]) \r\n                elif i == 2:\r\n                    #Spotify channel other media? (netflix?) \r\n                    controller[2].set_volume(pot[i])\r\n                    controller[3].set_volume(pot[i])\r\n                elif i == 3:\r\n                    #Discord channel\r\n                    controller[4].set_volume(pot[i])\r\n                    controller[5].set_volume(pot[i])\r\n                    pass                    \r\n                elif i == 4:\r\n                    #gaming channel\r\n                    \r\n                    pass\r\n                else:\r\n                    pass\r\n\r\n\r\n            for i in range(len(sw)):\r\n                pass\r\n            \r\n        except:\r\n            pass\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()"
        }
    ]
}
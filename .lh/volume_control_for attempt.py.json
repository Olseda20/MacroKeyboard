{
    "sourceFile": "volume_control_for attempt.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1621813785627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1621813994065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,174 +0,0 @@\n-\r\n-from __future__ import print_function\r\n-\r\n-from ctypes import cast, POINTER\r\n-from comtypes import CLSCTX_ALL\r\n-from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume\r\n-\r\n-from pycaw.pycaw import AudioUtilities\r\n-\r\n-\r\n-from pynput.keyboard import Key, Controller #https://pypi.org/project/pynput/\r\n-\r\n-import serial\r\n-from time import sleep\r\n-\r\n-from math import log, exp\r\n-\r\n-from serial.serialwin32 import Serial\r\n-ser = serial.Serial('COM3', 115200, timeout=None)\r\n-\r\n-class AudioController(object):\r\n-    def __init__(self, process_name):\r\n-        self.process_name = process_name\r\n-        self.volume = self.process_volume()\r\n-\r\n-    def mute(self):\r\n-        sessions = AudioUtilities.GetAllSessions()\r\n-        for session in sessions:\r\n-            interface = session.SimpleAudioVolume\r\n-            if session.Process and session.Process.name() == self.process_name:\r\n-                interface.SetMute(1, None)\r\n-                print(self.process_name, 'has been muted.')  # debug\r\n-\r\n-    def unmute(self):\r\n-        sessions = AudioUtilities.GetAllSessions()\r\n-        for session in sessions:\r\n-            interface = session.SimpleAudioVolume\r\n-            if session.Process and session.Process.name() == self.process_name:\r\n-                interface.SetMute(0, None)\r\n-                print(self.process_name, 'has been unmuted.')  # debug\r\n-\r\n-    def process_volume(self):\r\n-        sessions = AudioUtilities.GetAllSessions()\r\n-        for session in sessions:\r\n-            interface = session.SimpleAudioVolume\r\n-            if session.Process and session.Process.name() == self.process_name:\r\n-                # print('Volume:', interface.GetMasterVolume())  # debug\r\n-                return interface.GetMasterVolume()\r\n-\r\n-    def set_volume(self, decibels):\r\n-        sessions = AudioUtilities.GetAllSessions()\r\n-        for session in sessions:\r\n-            interface = session.SimpleAudioVolume\r\n-            if session.Process and session.Process.name() == self.process_name:\r\n-                # only set volume in the range 0.0 to 1.0\r\n-                self.volume = min(1.0, max(0.0, decibels))\r\n-                interface.SetMasterVolume(self.volume, None)\r\n-                # print('Volume set to', self.volume)  # debug\r\n-\r\n-    # def decrease_volume(self, decibels):\r\n-    #     sessions = AudioUtilities.GetAllSessions()\r\n-    #     for session in sessions:\r\n-    #         interface = session.SimpleAudioVolume\r\n-    #         if session.Process and session.Process.name() == self.process_name:\r\n-    #             # 0.0 is the min value, reduce by decibels\r\n-    #             self.volume = max(0.0, self.volume-decibels)\r\n-    #             interface.SetMasterVolume(self.volume, None)\r\n-    #             print('Volume reduced to', self.volume)  # debug\r\n-\r\n-    # def increase_volume(self, decibels):\r\n-    #     sessions = AudioUtilities.GetAllSessions()\r\n-    #     for session in sessions:\r\n-    #         interface = session.SimpleAudioVolume\r\n-    #         if session.Process and session.Process.name() == self.process_name:\r\n-    #             # 1.0 is the max value, raise by decibels\r\n-    #             self.volume = min(1.0, self.volume+decibels)\r\n-    #             interface.SetMasterVolume(self.volume, None)\r\n-    #             print('Volume raised to', self.volume)  # debug\r\n-\r\n-def initiateAudioController():\r\n-    controller = []\r\n-\r\n-    chan1 = ['brave','Twitch']\r\n-    chan2 = ['Spotify','']\r\n-    chan3 = ['Discord','']\r\n-    chan4 = ['csgo','']\r\n-    chan = [chan1,chan2,chan3,chan4]\r\n-\r\n-    #channel 0 reserved for master volume\r\n-    #could be some kind of for loop for a list in a to create the individual channels\r\n-\r\n-    #channel 1 (browser?)\r\n-    for i in range(len(chan)):\r\n-        for j in range(len(chan[i])):\r\n-            controller.append(AudioController(chan[i][j] + '.exe'))\r\n-    #     controller.append(AudioController(chan[1] + '.exe'))\r\n-    # #channel 2 (multimedia spotify netflix..)\r\n-    # controller.append(AudioController(chan2[0] + '.exe'))\r\n-    # controller.append(AudioController(chan2[1] + '.exe'))\r\n-\r\n-    # #channel 3 \r\n-    # controller.append(AudioController(chan3[0] + '.exe'))\r\n-    # controller.append(AudioController(chan3[1] + '.exe'))\r\n-\r\n-    # #channel 4 (for games)\r\n-    # controller.append(AudioController(chan4[0] + '.exe'))\r\n-    # controller.append(AudioController(chan4[1] + '.exe'))\r\n-\r\n-    return controller, chan \r\n-\r\n-def main():\r\n-    controller, chan = initiateAudioController()\r\n-    countPrograms = sum([len(element) for element in chan])\r\n-\r\n-    devices = AudioUtilities.GetSpeakers()\r\n-    interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)\r\n-\r\n-    master = cast(interface, POINTER(IAudioEndpointVolume))\r\n-\r\n-    print('start')\r\n-    while True:\r\n-        try:\r\n-\r\n-            #waiting for serial data\r\n-            data = (ser.readline().rstrip()).decode()\r\n-            dataEval = eval('[' + data + ']')[0]\r\n-            print(dataEval)\r\n-            #potentiometer and switch data\r\n-            pot, sw = dataEval\r\n-            # print(pot)\r\n-\r\n-            for i in range(len(pot)):\r\n-                if i == 0:\r\n-                    masterVal = -78*exp(-3.97*pot[i])+1.452\r\n-                    master.SetMasterVolumeLevel(masterVal, None)\r\n-                \r\n-                for j in range(1,len(chan)):\r\n-                    #general media, brave, twitch? \r\n-                    for k in range(countPrograms):\r\n-                        controller[k].set_volume(pot[j])\r\n-                # elif i == 2:\r\n-                #     #Spotify channel other media? (netflix?) \r\n-                #     controller[2].set_volume(pot[i])\r\n-                #     controller[3].set_volume(pot[i])\r\n-                # elif i == 3:\r\n-                #     #Discord channel\r\n-                #     controller[4].set_volume(pot[i])\r\n-                #     controller[5].set_volume(pot[i])\r\n-                #     pass                    \r\n-                # elif i == 4:\r\n-                #     #gaming channel\r\n-                #     controller[6].set_volume(pot[i])\r\n-                #     controller[7].set_volume(pot[i])\r\n-                #     pass\r\n-                else:\r\n-                    pass\r\n-\r\n-\r\n-            for i in range(len(sw)):\r\n-                #process only a keypress per time period?\r\n-\r\n-                \r\n-                #in time period set keypress to activate certain macros, probably \r\n-\r\n-                pass\r\n-\r\n-\r\n-        except:\r\n-            pass\r\n-\r\n-\r\n-\r\n-if __name__ == \"__main__\":\r\n-    main()\n\\ No newline at end of file\n"
                }
            ],
            "date": 1621813785627,
            "name": "Commit-0",
            "content": "\r\nfrom __future__ import print_function\r\n\r\nfrom ctypes import cast, POINTER\r\nfrom comtypes import CLSCTX_ALL\r\nfrom pycaw.pycaw import AudioUtilities, IAudioEndpointVolume\r\n\r\nfrom pycaw.pycaw import AudioUtilities\r\n\r\n\r\nfrom pynput.keyboard import Key, Controller #https://pypi.org/project/pynput/\r\n\r\nimport serial\r\nfrom time import sleep\r\n\r\nfrom math import log, exp\r\n\r\nfrom serial.serialwin32 import Serial\r\nser = serial.Serial('COM3', 115200, timeout=None)\r\n\r\nclass AudioController(object):\r\n    def __init__(self, process_name):\r\n        self.process_name = process_name\r\n        self.volume = self.process_volume()\r\n\r\n    def mute(self):\r\n        sessions = AudioUtilities.GetAllSessions()\r\n        for session in sessions:\r\n            interface = session.SimpleAudioVolume\r\n            if session.Process and session.Process.name() == self.process_name:\r\n                interface.SetMute(1, None)\r\n                print(self.process_name, 'has been muted.')  # debug\r\n\r\n    def unmute(self):\r\n        sessions = AudioUtilities.GetAllSessions()\r\n        for session in sessions:\r\n            interface = session.SimpleAudioVolume\r\n            if session.Process and session.Process.name() == self.process_name:\r\n                interface.SetMute(0, None)\r\n                print(self.process_name, 'has been unmuted.')  # debug\r\n\r\n    def process_volume(self):\r\n        sessions = AudioUtilities.GetAllSessions()\r\n        for session in sessions:\r\n            interface = session.SimpleAudioVolume\r\n            if session.Process and session.Process.name() == self.process_name:\r\n                # print('Volume:', interface.GetMasterVolume())  # debug\r\n                return interface.GetMasterVolume()\r\n\r\n    def set_volume(self, decibels):\r\n        sessions = AudioUtilities.GetAllSessions()\r\n        for session in sessions:\r\n            interface = session.SimpleAudioVolume\r\n            if session.Process and session.Process.name() == self.process_name:\r\n                # only set volume in the range 0.0 to 1.0\r\n                self.volume = min(1.0, max(0.0, decibels))\r\n                interface.SetMasterVolume(self.volume, None)\r\n                # print('Volume set to', self.volume)  # debug\r\n\r\n    # def decrease_volume(self, decibels):\r\n    #     sessions = AudioUtilities.GetAllSessions()\r\n    #     for session in sessions:\r\n    #         interface = session.SimpleAudioVolume\r\n    #         if session.Process and session.Process.name() == self.process_name:\r\n    #             # 0.0 is the min value, reduce by decibels\r\n    #             self.volume = max(0.0, self.volume-decibels)\r\n    #             interface.SetMasterVolume(self.volume, None)\r\n    #             print('Volume reduced to', self.volume)  # debug\r\n\r\n    # def increase_volume(self, decibels):\r\n    #     sessions = AudioUtilities.GetAllSessions()\r\n    #     for session in sessions:\r\n    #         interface = session.SimpleAudioVolume\r\n    #         if session.Process and session.Process.name() == self.process_name:\r\n    #             # 1.0 is the max value, raise by decibels\r\n    #             self.volume = min(1.0, self.volume+decibels)\r\n    #             interface.SetMasterVolume(self.volume, None)\r\n    #             print('Volume raised to', self.volume)  # debug\r\n\r\ndef initiateAudioController():\r\n    controller = []\r\n\r\n    chan1 = ['brave','Twitch']\r\n    chan2 = ['Spotify','']\r\n    chan3 = ['Discord','']\r\n    chan4 = ['csgo','']\r\n    chan = [chan1,chan2,chan3,chan4]\r\n\r\n    #channel 0 reserved for master volume\r\n    #could be some kind of for loop for a list in a to create the individual channels\r\n\r\n    #channel 1 (browser?)\r\n    for i in range(len(chan)):\r\n        for j in range(len(chan[i])):\r\n            controller.append(AudioController(chan[i][j] + '.exe'))\r\n    #     controller.append(AudioController(chan[1] + '.exe'))\r\n    # #channel 2 (multimedia spotify netflix..)\r\n    # controller.append(AudioController(chan2[0] + '.exe'))\r\n    # controller.append(AudioController(chan2[1] + '.exe'))\r\n\r\n    # #channel 3 \r\n    # controller.append(AudioController(chan3[0] + '.exe'))\r\n    # controller.append(AudioController(chan3[1] + '.exe'))\r\n\r\n    # #channel 4 (for games)\r\n    # controller.append(AudioController(chan4[0] + '.exe'))\r\n    # controller.append(AudioController(chan4[1] + '.exe'))\r\n\r\n    return controller, chan \r\n\r\ndef main():\r\n    controller, chan = initiateAudioController()\r\n    countPrograms = sum([len(element) for element in chan])\r\n\r\n    devices = AudioUtilities.GetSpeakers()\r\n    interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)\r\n\r\n    master = cast(interface, POINTER(IAudioEndpointVolume))\r\n\r\n    print('start')\r\n    while True:\r\n        try:\r\n\r\n            #waiting for serial data\r\n            data = (ser.readline().rstrip()).decode()\r\n            dataEval = eval('[' + data + ']')[0]\r\n            print(dataEval)\r\n            #potentiometer and switch data\r\n            pot, sw = dataEval\r\n            # print(pot)\r\n\r\n            for i in range(len(pot)):\r\n                if i == 0:\r\n                    masterVal = -78*exp(-3.97*pot[i])+1.452\r\n                    master.SetMasterVolumeLevel(masterVal, None)\r\n                \r\n                for j in range(1,len(chan)):\r\n                    #general media, brave, twitch? \r\n                    for k in range(countPrograms):\r\n                        controller[k].set_volume(pot[j])\r\n                # elif i == 2:\r\n                #     #Spotify channel other media? (netflix?) \r\n                #     controller[2].set_volume(pot[i])\r\n                #     controller[3].set_volume(pot[i])\r\n                # elif i == 3:\r\n                #     #Discord channel\r\n                #     controller[4].set_volume(pot[i])\r\n                #     controller[5].set_volume(pot[i])\r\n                #     pass                    \r\n                # elif i == 4:\r\n                #     #gaming channel\r\n                #     controller[6].set_volume(pot[i])\r\n                #     controller[7].set_volume(pot[i])\r\n                #     pass\r\n                else:\r\n                    pass\r\n\r\n\r\n            for i in range(len(sw)):\r\n                #process only a keypress per time period?\r\n\r\n                \r\n                #in time period set keypress to activate certain macros, probably \r\n\r\n                pass\r\n\r\n\r\n        except:\r\n            pass\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()"
        }
    ]
}
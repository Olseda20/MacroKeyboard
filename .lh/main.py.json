{
    "sourceFile": "main.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 103,
            "patches": [
                {
                    "date": 1621621797238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1621686932710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     print('start')\r\n     \r\n     pot_max_val = 4095\r\n \r\n-    potPins = [34,35,32,33, 39]\r\n+    potPins = [34,35,32,33],39]\r\n     potLen = len(potPins)\r\n     pot = potVal = prevPotVal =[0] * potLen\r\n \r\n     swPins = [23,22,21,19,18,5,4,26,27,14]\r\n"
                },
                {
                    "date": 1621691381902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n     print('start')\r\n     \r\n     pot_max_val = 4095\r\n \r\n-    potPins = [34,35,32,33],39]\r\n+    potPins = [34,36,32,33,39]\r\n     potLen = len(potPins)\r\n     pot = potVal = prevPotVal =[0] * potLen\r\n \r\n     swPins = [23,22,21,19,18,5,4,26,27,14]\r\n"
                },
                {
                    "date": 1621695266775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n         # print(potVal)\r\n \r\n         #Process the Key Data\r\n         for i in range(swLen):\r\n-            sw = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n+            sw = Pin(swPins[i], Pin.IN, Pin.PULL_DOWN)\r\n             currSwVal = sw.value()\r\n             \r\n             #finding the dropping edve (since it is active low)\r\n             if prevSwVal == 1 and currSwVal == 0: \r\n"
                },
                {
                    "date": 1621695274989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n         # print(potVal)\r\n \r\n         #Process the Key Data\r\n         for i in range(swLen):\r\n-            sw = Pin(swPins[i], Pin.IN, Pin.PULL_DOWN)\r\n+            sw = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n             currSwVal = sw.value()\r\n             \r\n             #finding the dropping edve (since it is active low)\r\n             if prevSwVal == 1 and currSwVal == 0: \r\n"
                },
                {
                    "date": 1621695280528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n         # print(potVal)\r\n \r\n         #Process the Key Data\r\n         for i in range(swLen):\r\n-            sw = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n+            sw = Pin(swPins[i], Pin.IN, Pin.PULL_SOWN)\r\n             currSwVal = sw.value()\r\n             \r\n             #finding the dropping edve (since it is active low)\r\n             if prevSwVal == 1 and currSwVal == 0: \r\n"
                },
                {
                    "date": 1621695336833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n         # print(potVal)\r\n \r\n         #Process the Key Data\r\n         for i in range(swLen):\r\n-            sw = Pin(swPins[i], Pin.IN, Pin.PULL_SOWN)\r\n+            sw = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n             currSwVal = sw.value()\r\n             \r\n             #finding the dropping edve (since it is active low)\r\n             if prevSwVal == 1 and currSwVal == 0: \r\n"
                },
                {
                    "date": 1621695368283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,9 @@\n         # print(potVal)\r\n \r\n         #Process the Key Data\r\n         for i in range(swLen):\r\n+            change = 1\r\n             sw = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n             currSwVal = sw.value()\r\n             \r\n             #finding the dropping edve (since it is active low)\r\n"
                },
                {
                    "date": 1621695442779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,14 +48,14 @@\n             change = 1\r\n             sw = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n             currSwVal = sw.value()\r\n             \r\n-            #finding the dropping edve (since it is active low)\r\n-            if prevSwVal == 1 and currSwVal == 0: \r\n-                change = 1\r\n-                # set the swVal aray to on only on dropping edge\r\n-                pass\r\n-        # print(swVal)\r\n+            # #finding the dropping edve (since it is active low)\r\n+            # if prevSwVal == 1 and currSwVal == 0: \r\n+            #     change = 1\r\n+            #     # set the swVal aray to on only on dropping edge\r\n+            #     pass\r\n+        print(swVal)\r\n         \r\n         ## process the switch data to out everytime a key is pressed \r\n         if change == 1:    \r\n             data = [list(potVal), list(swVal)]\r\n"
                },
                {
                    "date": 1621695462014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n         \r\n         ## process the switch data to out everytime a key is pressed \r\n         if change == 1:    \r\n             data = [list(potVal), list(swVal)]\r\n-            print(data)\r\n+            # print(data)\r\n             uart.write(str(data))\r\n             uart.write('')\r\n \r\n             prevPotVal = potVal\r\n"
                },
                {
                    "date": 1621695588197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n         #Process the Key Data\r\n         for i in range(swLen):\r\n             change = 1\r\n             sw = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n-            currSwVal = sw.value()\r\n+            currSwVal[i] = sw.value()\r\n             \r\n             # #finding the dropping edve (since it is active low)\r\n             # if prevSwVal == 1 and currSwVal == 0: \r\n             #     change = 1\r\n"
                },
                {
                    "date": 1621695619029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,10 @@\n         #Process the Key Data\r\n         for i in range(swLen):\r\n             change = 1\r\n             sw = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n-            currSwVal[i] = sw.value()\r\n+            currSwVal = sw.value()\r\n+            swVal[i] = currSwVal\r\n             \r\n             # #finding the dropping edve (since it is active low)\r\n             # if prevSwVal == 1 and currSwVal == 0: \r\n             #     change = 1\r\n"
                },
                {
                    "date": 1621695662425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,15 +47,16 @@\n         for i in range(swLen):\r\n             change = 1\r\n             sw = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n             currSwVal = sw.value()\r\n-            swVal[i] = currSwVal\r\n             \r\n-            # #finding the dropping edve (since it is active low)\r\n-            # if prevSwVal == 1 and currSwVal == 0: \r\n-            #     change = 1\r\n-            #     # set the swVal aray to on only on dropping edge\r\n-            #     pass\r\n+            #finding the dropping edve (since it is active low)\r\n+            if prevSwVal == 1 and currSwVal == 0: \r\n+                change = 1\r\n+                swVal[i] = currSwVal\r\n+\r\n+                # set the swVal aray to on only on dropping edge\r\n+                pass\r\n         print(swVal)\r\n         \r\n         ## process the switch data to out everytime a key is pressed \r\n         if change == 1:    \r\n"
                },
                {
                    "date": 1621695674187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,12 +52,11 @@\n             #finding the dropping edve (since it is active low)\r\n             if prevSwVal == 1 and currSwVal == 0: \r\n                 change = 1\r\n                 swVal[i] = currSwVal\r\n-\r\n                 # set the swVal aray to on only on dropping edge\r\n-                pass\r\n-        print(swVal)\r\n+                # pass\r\n+        # print(swVal)\r\n         \r\n         ## process the switch data to out everytime a key is pressed \r\n         if change == 1:    \r\n             data = [list(potVal), list(swVal)]\r\n"
                },
                {
                    "date": 1621695717128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,14 +54,14 @@\n                 change = 1\r\n                 swVal[i] = currSwVal\r\n                 # set the swVal aray to on only on dropping edge\r\n                 # pass\r\n-        # print(swVal)\r\n+        print(swVal)\r\n         \r\n         ## process the switch data to out everytime a key is pressed \r\n         if change == 1:    \r\n             data = [list(potVal), list(swVal)]\r\n-            # print(data)\r\n+            print(data)\r\n             uart.write(str(data))\r\n             uart.write('')\r\n \r\n             prevPotVal = potVal\r\n"
                },
                {
                    "date": 1621695722166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n         \r\n         ## process the switch data to out everytime a key is pressed \r\n         if change == 1:    \r\n             data = [list(potVal), list(swVal)]\r\n-            print(data)\r\n+            # print(data)\r\n             uart.write(str(data))\r\n             uart.write('')\r\n \r\n             prevPotVal = potVal\r\n"
                },
                {
                    "date": 1621695747786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n             \r\n             #finding the dropping edve (since it is active low)\r\n             if prevSwVal == 1 and currSwVal == 0: \r\n                 change = 1\r\n-                swVal[i] = currSwVal\r\n+                swVal[i] = 1\r\n                 # set the swVal aray to on only on dropping edge\r\n                 # pass\r\n         print(swVal)\r\n         \r\n"
                },
                {
                    "date": 1621695790402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n             \r\n             #finding the dropping edve (since it is active low)\r\n             if prevSwVal == 1 and currSwVal == 0: \r\n                 change = 1\r\n-                swVal[i] = 1\r\n+                swVal[i] = currSwVal\r\n                 # set the swVal aray to on only on dropping edge\r\n                 # pass\r\n         print(swVal)\r\n         \r\n"
                },
                {
                    "date": 1621696030070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,10 +52,11 @@\n             #finding the dropping edve (since it is active low)\r\n             if prevSwVal == 1 and currSwVal == 0: \r\n                 change = 1\r\n                 swVal[i] = currSwVal\r\n+\r\n                 # set the swVal aray to on only on dropping edge\r\n-                # pass\r\n+                pass\r\n         print(swVal)\r\n         \r\n         ## process the switch data to out everytime a key is pressed \r\n         if change == 1:    \r\n"
                },
                {
                    "date": 1621696099090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,10 +55,10 @@\n                 swVal[i] = currSwVal\r\n \r\n                 # set the swVal aray to on only on dropping edge\r\n                 pass\r\n-        print(swVal)\r\n         \r\n+        \r\n         ## process the switch data to out everytime a key is pressed \r\n         if change == 1:    \r\n             data = [list(potVal), list(swVal)]\r\n             # print(data)\r\n@@ -67,8 +67,10 @@\n \r\n             prevPotVal = potVal\r\n             prevSwVal = swVal\r\n \r\n+            print(swVal)\r\n+\r\n         time.sleep(0.05)\r\n \r\n \r\n     # print('end')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1621696121296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,8 @@\n                 change = 1\r\n                 if currPotVal < 0.01:\r\n                     potVal[i] == 0\r\n                 potVal[i] = currPotVal\r\n-        # print(potVal)\r\n \r\n         #Process the Key Data\r\n         for i in range(swLen):\r\n             change = 1\r\n@@ -66,9 +65,10 @@\n             uart.write('')\r\n \r\n             prevPotVal = potVal\r\n             prevSwVal = swVal\r\n-\r\n+           \r\n+            print(potVal)\r\n             print(swVal)\r\n \r\n         time.sleep(0.05)\r\n \r\n"
                },
                {
                    "date": 1621696129983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,8 @@\n                 change = 1\r\n                 swVal[i] = currSwVal\r\n \r\n                 # set the swVal aray to on only on dropping edge\r\n-                pass\r\n         \r\n         \r\n         ## process the switch data to out everytime a key is pressed \r\n         if change == 1:    \r\n"
                },
                {
                    "date": 1621696148830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n \r\n             prevPotVal = potVal\r\n             prevSwVal = swVal\r\n            \r\n-            print(potVal)\r\n+            # print(potVal)\r\n             print(swVal)\r\n \r\n         time.sleep(0.05)\r\n \r\n"
                },
                {
                    "date": 1621696289230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n             \r\n             #finding the dropping edve (since it is active low)\r\n             if prevSwVal == 1 and currSwVal == 0: \r\n                 change = 1\r\n-                swVal[i] = currSwVal\r\n+                swVal[i] = 1\r\n \r\n                 # set the swVal aray to on only on dropping edge\r\n         \r\n         \r\n"
                },
                {
                    "date": 1621696315362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,11 +48,11 @@\n             sw = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n             currSwVal = sw.value()\r\n             \r\n             #finding the dropping edve (since it is active low)\r\n-            if prevSwVal == 1 and currSwVal == 0: \r\n-                change = 1\r\n-                swVal[i] = 1\r\n+            # if prevSwVal == 1 and currSwVal == 0: \r\n+            #     change = 1\r\n+            swVal[i] = 1\r\n \r\n                 # set the swVal aray to on only on dropping edge\r\n         \r\n         \r\n"
                },
                {
                    "date": 1621696458844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,11 +48,11 @@\n             sw = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n             currSwVal = sw.value()\r\n             \r\n             #finding the dropping edve (since it is active low)\r\n-            # if prevSwVal == 1 and currSwVal == 0: \r\n-            #     change = 1\r\n-            swVal[i] = 1\r\n+            if prevSwVal == 1 and currSwVal == 0: \r\n+                change = 1\r\n+                swVal[i] = currSwVal\r\n \r\n                 # set the swVal aray to on only on dropping edge\r\n         \r\n         \r\n"
                },
                {
                    "date": 1621696463917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,75 @@\n+# This file is executed on every boot (including wake-boot from deepsleep)\r\n+#import esp\r\n+#esp.osdebug(None)\r\n+#import webrepl\r\n+#webrepl.start()\r\n+\r\n+from machine import Pin, ADC, UART\r\n+import time \r\n+import math\r\n+import ujson \r\n+\r\n+uart = UART(1, 115200)                                      # init with given baudrate\r\n+uart.init(115200, bits=8, parity=None, stop=1, txbuf=66)    # init with given parameters\r\n+\r\n+if __name__ == \"__main__\":\r\n+    print('start')\r\n+    \r\n+    pot_max_val = 4095\r\n+\r\n+    potPins = [34,36,32,33,39]\r\n+    potLen = len(potPins)\r\n+    pot = potVal = prevPotVal =[0] * potLen\r\n+\r\n+    swPins = [23,22,21,19,18,5,4,26,27,14]\r\n+    swLen = len(swPins)\r\n+    sw = swVal = prevSwVal = [0] * swLen\r\n+\r\n+\r\n+    while True:\r\n+        change = 0\r\n+        #Process the Pot Data\r\n+        for i in range(potLen):\r\n+            pot = ADC(Pin(potPins[i]))\r\n+            pot.atten(ADC.ATTN_11DB)\r\n+            currPotVal = round(pot.read()/pot_max_val,3)\r\n+            \r\n+            if currPotVal - 0.01 <= prevPotVal[i] <= currPotVal + 0.01:\r\n+                pass\r\n+            else:\r\n+                change = 1\r\n+                if currPotVal < 0.01:\r\n+                    potVal[i] == 0\r\n+                potVal[i] = currPotVal\r\n+\r\n+        #Process the Key Data\r\n+        for i in range(swLen):\r\n+            change = 1\r\n+            sw = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n+            currSwVal = sw.value()\r\n+            \r\n+            #finding the dropping edve (since it is active low)\r\n+            if prevSwVal == 1 and currSwVal == 0: \r\n+                change = 1\r\n+            swVal[i] = currSwVal\r\n+\r\n+                # set the swVal aray to on only on dropping edge\r\n+        \r\n+        \r\n+        ## process the switch data to out everytime a key is pressed \r\n+        if change == 1:    \r\n+            data = [list(potVal), list(swVal)]\r\n+            # print(data)\r\n+            uart.write(str(data))\r\n+            uart.write('')\r\n+\r\n+            prevPotVal = potVal\r\n+            prevSwVal = swVal\r\n+           \r\n+            # print(potVal)\r\n+            print(swVal)\r\n+\r\n+        time.sleep(0.05)\r\n+\r\n+\r\n+    # print('end')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1621696530466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n \r\n         #Process the Key Data\r\n         for i in range(swLen):\r\n             change = 1\r\n-            sw = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n+            sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n             currSwVal = sw.value()\r\n             \r\n             #finding the dropping edve (since it is active low)\r\n             if prevSwVal == 1 and currSwVal == 0: \r\n@@ -71,80 +71,5 @@\n \r\n         time.sleep(0.05)\r\n \r\n \r\n-    # print('end')\n-# This file is executed on every boot (including wake-boot from deepsleep)\r\n-#import esp\r\n-#esp.osdebug(None)\r\n-#import webrepl\r\n-#webrepl.start()\r\n-\r\n-from machine import Pin, ADC, UART\r\n-import time \r\n-import math\r\n-import ujson \r\n-\r\n-uart = UART(1, 115200)                                      # init with given baudrate\r\n-uart.init(115200, bits=8, parity=None, stop=1, txbuf=66)    # init with given parameters\r\n-\r\n-if __name__ == \"__main__\":\r\n-    print('start')\r\n-    \r\n-    pot_max_val = 4095\r\n-\r\n-    potPins = [34,36,32,33,39]\r\n-    potLen = len(potPins)\r\n-    pot = potVal = prevPotVal =[0] * potLen\r\n-\r\n-    swPins = [23,22,21,19,18,5,4,26,27,14]\r\n-    swLen = len(swPins)\r\n-    sw = swVal = prevSwVal = [0] * swLen\r\n-\r\n-\r\n-    while True:\r\n-        change = 0\r\n-        #Process the Pot Data\r\n-        for i in range(potLen):\r\n-            pot = ADC(Pin(potPins[i]))\r\n-            pot.atten(ADC.ATTN_11DB)\r\n-            currPotVal = round(pot.read()/pot_max_val,3)\r\n-            \r\n-            if currPotVal - 0.01 <= prevPotVal[i] <= currPotVal + 0.01:\r\n-                pass\r\n-            else:\r\n-                change = 1\r\n-                if currPotVal < 0.01:\r\n-                    potVal[i] == 0\r\n-                potVal[i] = currPotVal\r\n-\r\n-        #Process the Key Data\r\n-        for i in range(swLen):\r\n-            change = 1\r\n-            sw = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n-            currSwVal = sw.value()\r\n-            \r\n-            #finding the dropping edve (since it is active low)\r\n-            if prevSwVal == 1 and currSwVal == 0: \r\n-                change = 1\r\n-                swVal[i] = currSwVal\r\n-\r\n-                # set the swVal aray to on only on dropping edge\r\n-        \r\n-        \r\n-        ## process the switch data to out everytime a key is pressed \r\n-        if change == 1:    \r\n-            data = [list(potVal), list(swVal)]\r\n-            # print(data)\r\n-            uart.write(str(data))\r\n-            uart.write('')\r\n-\r\n-            prevPotVal = potVal\r\n-            prevSwVal = swVal\r\n-           \r\n-            # print(potVal)\r\n-            print(swVal)\r\n-\r\n-        time.sleep(0.05)\r\n-\r\n-\r\n     # print('end')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1621696537627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n         #Process the Key Data\r\n         for i in range(swLen):\r\n             change = 1\r\n             sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n-            currSwVal = sw.value()\r\n+            currSwVal[i] = sw[i].value()\r\n             \r\n             #finding the dropping edve (since it is active low)\r\n             if prevSwVal == 1 and currSwVal == 0: \r\n                 change = 1\r\n"
                },
                {
                    "date": 1621696574733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,14 +45,14 @@\n         #Process the Key Data\r\n         for i in range(swLen):\r\n             change = 1\r\n             sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n-            currSwVal[i] = sw[i].value()\r\n+            swVal[i] = sw[i].value()\r\n             \r\n             #finding the dropping edve (since it is active low)\r\n             if prevSwVal == 1 and currSwVal == 0: \r\n                 change = 1\r\n-            swVal[i] = currSwVal\r\n+            # swVal[i] = currSwVal\r\n \r\n                 # set the swVal aray to on only on dropping edge\r\n         \r\n         \r\n"
                },
                {
                    "date": 1621696582857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n             sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n             swVal[i] = sw[i].value()\r\n             \r\n             #finding the dropping edve (since it is active low)\r\n-            if prevSwVal == 1 and currSwVal == 0: \r\n+            if prevSwVal[i] == 1 and swVal[i] == 0: \r\n                 change = 1\r\n             # swVal[i] = currSwVal\r\n \r\n                 # set the swVal aray to on only on dropping edge\r\n"
                },
                {
                    "date": 1621696632330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,20 +28,20 @@\n \r\n     while True:\r\n         change = 0\r\n         #Process the Pot Data\r\n-        for i in range(potLen):\r\n-            pot = ADC(Pin(potPins[i]))\r\n-            pot.atten(ADC.ATTN_11DB)\r\n-            currPotVal = round(pot.read()/pot_max_val,3)\r\n+        # for i in range(potLen):\r\n+        #     pot = ADC(Pin(potPins[i]))\r\n+        #     pot.atten(ADC.ATTN_11DB)\r\n+        #     currPotVal = round(pot.read()/pot_max_val,3)\r\n             \r\n-            if currPotVal - 0.01 <= prevPotVal[i] <= currPotVal + 0.01:\r\n-                pass\r\n-            else:\r\n-                change = 1\r\n-                if currPotVal < 0.01:\r\n-                    potVal[i] == 0\r\n-                potVal[i] = currPotVal\r\n+        #     if currPotVal - 0.01 <= prevPotVal[i] <= currPotVal + 0.01:\r\n+        #         pass\r\n+        #     else:\r\n+        #         change = 1\r\n+        #         if currPotVal < 0.01:\r\n+        #             potVal[i] == 0\r\n+        #         potVal[i] = currPotVal\r\n \r\n         #Process the Key Data\r\n         for i in range(swLen):\r\n             change = 1\r\n"
                },
                {
                    "date": 1621696643846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,20 +28,20 @@\n \r\n     while True:\r\n         change = 0\r\n         #Process the Pot Data\r\n-        # for i in range(potLen):\r\n-        #     pot = ADC(Pin(potPins[i]))\r\n-        #     pot.atten(ADC.ATTN_11DB)\r\n-        #     currPotVal = round(pot.read()/pot_max_val,3)\r\n+        for i in range(potLen):\r\n+            pot = ADC(Pin(potPins[i]))\r\n+            pot.atten(ADC.ATTN_11DB)\r\n+            currPotVal = round(pot.read()/pot_max_val,3)\r\n             \r\n-        #     if currPotVal - 0.01 <= prevPotVal[i] <= currPotVal + 0.01:\r\n-        #         pass\r\n-        #     else:\r\n-        #         change = 1\r\n-        #         if currPotVal < 0.01:\r\n-        #             potVal[i] == 0\r\n-        #         potVal[i] = currPotVal\r\n+            if currPotVal - 0.01 <= prevPotVal[i] <= currPotVal + 0.01:\r\n+                pass\r\n+            else:\r\n+                change = 1\r\n+                if currPotVal < 0.01:\r\n+                    potVal[i] == 0\r\n+                potVal[i] = currPotVal\r\n \r\n         #Process the Key Data\r\n         for i in range(swLen):\r\n             change = 1\r\n"
                },
                {
                    "date": 1621696875560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,19 +42,19 @@\n                     potVal[i] == 0\r\n                 potVal[i] = currPotVal\r\n \r\n         #Process the Key Data\r\n-        for i in range(swLen):\r\n-            change = 1\r\n-            sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n-            swVal[i] = sw[i].value()\r\n+        # for i in range(swLen):\r\n+        #     change = 1\r\n+        #     sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n+        #     swVal[i] = sw[i].value()\r\n             \r\n-            #finding the dropping edve (since it is active low)\r\n-            if prevSwVal[i] == 1 and swVal[i] == 0: \r\n-                change = 1\r\n-            # swVal[i] = currSwVal\r\n+        #     #finding the dropping edve (since it is active low)\r\n+        #     if prevSwVal[i] == 1 and swVal[i] == 0: \r\n+        #         change = 1\r\n+        #     # swVal[i] = currSwVal\r\n \r\n-                # set the swVal aray to on only on dropping edge\r\n+        #         # set the swVal aray to on only on dropping edge\r\n         \r\n         \r\n         ## process the switch data to out everytime a key is pressed \r\n         if change == 1:    \r\n"
                },
                {
                    "date": 1621808439671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,20 +41,20 @@\n                 if currPotVal < 0.01:\r\n                     potVal[i] == 0\r\n                 potVal[i] = currPotVal\r\n \r\n-        #Process the Key Data\r\n-        # for i in range(swLen):\r\n-        #     change = 1\r\n-        #     sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n-        #     swVal[i] = sw[i].value()\r\n+        # Process the Key Data\r\n+        for i in range(swLen):\r\n+            change = 1\r\n+            sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n+            swVal[i] = sw[i].value()\r\n             \r\n-        #     #finding the dropping edve (since it is active low)\r\n-        #     if prevSwVal[i] == 1 and swVal[i] == 0: \r\n-        #         change = 1\r\n-        #     # swVal[i] = currSwVal\r\n+            #finding the dropping edve (since it is active low)\r\n+            if prevSwVal[i] == 1 and swVal[i] == 0: \r\n+                change = 1\r\n+            # swVal[i] = currSwVal\r\n \r\n-        #         # set the swVal aray to on only on dropping edge\r\n+                # set the swVal aray to on only on dropping edge\r\n         \r\n         \r\n         ## process the switch data to out everytime a key is pressed \r\n         if change == 1:    \r\n"
                },
                {
                    "date": 1621808556272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,10 +48,10 @@\n             sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n             swVal[i] = sw[i].value()\r\n             \r\n             #finding the dropping edve (since it is active low)\r\n-            if prevSwVal[i] == 1 and swVal[i] == 0: \r\n-                change = 1\r\n+            # if prevSwVal[i] == 1 and swVal[i] == 0: \r\n+            #     change = 1\r\n             # swVal[i] = currSwVal\r\n \r\n                 # set the swVal aray to on only on dropping edge\r\n         \r\n"
                },
                {
                    "date": 1621808561379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n                 potVal[i] = currPotVal\r\n \r\n         # Process the Key Data\r\n         for i in range(swLen):\r\n-            change = 1\r\n+            change = 0\r\n             sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n             swVal[i] = sw[i].value()\r\n             \r\n             #finding the dropping edve (since it is active low)\r\n"
                },
                {
                    "date": 1621808597792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,11 +48,11 @@\n             sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n             swVal[i] = sw[i].value()\r\n             \r\n             #finding the dropping edve (since it is active low)\r\n-            # if prevSwVal[i] == 1 and swVal[i] == 0: \r\n-            #     change = 1\r\n-            # swVal[i] = currSwVal\r\n+            if prevSwVal[i] == 1 and swVal[i] == 0: \r\n+                change = 1\r\n+                swVal[i] = 1\r\n \r\n                 # set the swVal aray to on only on dropping edge\r\n         \r\n         \r\n"
                },
                {
                    "date": 1621808619606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,17 +58,17 @@\n         \r\n         ## process the switch data to out everytime a key is pressed \r\n         if change == 1:    \r\n             data = [list(potVal), list(swVal)]\r\n-            # print(data)\r\n+            print(data)\r\n             uart.write(str(data))\r\n             uart.write('')\r\n \r\n             prevPotVal = potVal\r\n             prevSwVal = swVal\r\n            \r\n             # print(potVal)\r\n-            print(swVal)\r\n+            # print(swVal)\r\n \r\n         time.sleep(0.05)\r\n \r\n \r\n"
                },
                {
                    "date": 1621808655697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,17 +42,17 @@\n                     potVal[i] == 0\r\n                 potVal[i] = currPotVal\r\n \r\n         # Process the Key Data\r\n-        for i in range(swLen):\r\n-            change = 0\r\n-            sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n-            swVal[i] = sw[i].value()\r\n+        # for i in range(swLen):\r\n+        #     change = 0\r\n+        #     sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n+        #     swVal[i] = sw[i].value()\r\n             \r\n-            #finding the dropping edve (since it is active low)\r\n-            if prevSwVal[i] == 1 and swVal[i] == 0: \r\n-                change = 1\r\n-                swVal[i] = 1\r\n+        #     #finding the dropping edve (since it is active low)\r\n+        #     if prevSwVal[i] == 1 and swVal[i] == 0: \r\n+        #         change = 1\r\n+        #         swVal[i] = 1\r\n \r\n                 # set the swVal aray to on only on dropping edge\r\n         \r\n         \r\n"
                },
                {
                    "date": 1621808717861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,17 +42,17 @@\n                     potVal[i] == 0\r\n                 potVal[i] = currPotVal\r\n \r\n         # Process the Key Data\r\n-        # for i in range(swLen):\r\n-        #     change = 0\r\n-        #     sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n-        #     swVal[i] = sw[i].value()\r\n+        for i in range(swLen):\r\n+            change = 0\r\n+            sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n+            swVal[i] = sw[i].value()\r\n             \r\n-        #     #finding the dropping edve (since it is active low)\r\n-        #     if prevSwVal[i] == 1 and swVal[i] == 0: \r\n-        #         change = 1\r\n-        #         swVal[i] = 1\r\n+            #finding the dropping edve (since it is active low)\r\n+            if prevSwVal[i] == 1 and swVal[i] == 0: \r\n+                change = 1\r\n+                swVal[i] = 1\r\n \r\n                 # set the swVal aray to on only on dropping edge\r\n         \r\n         \r\n"
                },
                {
                    "date": 1621808735779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n                 potVal[i] = currPotVal\r\n \r\n         # Process the Key Data\r\n         for i in range(swLen):\r\n-            change = 0\r\n+            change2 = 0\r\n             sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n             swVal[i] = sw[i].value()\r\n             \r\n             #finding the dropping edve (since it is active low)\r\n"
                },
                {
                    "date": 1621808748732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,75 @@\n+# This file is executed on every boot (including wake-boot from deepsleep)\r\n+#import esp\r\n+#esp.osdebug(None)\r\n+#import webrepl\r\n+#webrepl.start()\r\n+\r\n+from machine import Pin, ADC, UART\r\n+import time \r\n+import math\r\n+import ujson \r\n+\r\n+uart = UART(1, 115200)                                      # init with given baudrate\r\n+uart.init(115200, bits=8, parity=None, stop=1, txbuf=66)    # init with given parameters\r\n+\r\n+if __name__ == \"__main__\":\r\n+    print('start')\r\n+    \r\n+    pot_max_val = 4095\r\n+\r\n+    potPins = [34,36,32,33,39]\r\n+    potLen = len(potPins)\r\n+    pot = potVal = prevPotVal =[0] * potLen\r\n+\r\n+    swPins = [23,22,21,19,18,5,4,26,27,14]\r\n+    swLen = len(swPins)\r\n+    sw = swVal = prevSwVal = [0] * swLen\r\n+\r\n+\r\n+    while True:\r\n+        change = 0\r\n+        #Process the Pot Data\r\n+        for i in range(potLen):\r\n+            pot = ADC(Pin(potPins[i]))\r\n+            pot.atten(ADC.ATTN_11DB)\r\n+            currPotVal = round(pot.read()/pot_max_val,3)\r\n+            \r\n+            if currPotVal - 0.01 <= prevPotVal[i] <= currPotVal + 0.01:\r\n+                pass\r\n+            else:\r\n+                change = 1\r\n+                if currPotVal < 0.01:\r\n+                    potVal[i] == 0\r\n+                potVal[i] = currPotVal\r\n+\r\n+        # Process the Key Data\r\n+        for i in range(swLen):\r\n+            changeSW = 0\r\n+            sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n+            swVal[i] = sw[i].value()\r\n+            \r\n+            #finding the dropping edve (since it is active low)\r\n+            if prevSwVal[i] == 1 and swVal[i] == 0: \r\n+                changeSW = 1\r\n+                swVal[i] = 1\r\n+\r\n+                # set the swVal aray to on only on dropping edge\r\n+        \r\n+        \r\n+        ## process the switch data to out everytime a key is pressed \r\n+        if change == 1:    \r\n+            data = [list(potVal), list(swVal)]\r\n+            print(data)\r\n+            uart.write(str(data))\r\n+            uart.write('')\r\n+\r\n+            prevPotVal = potVal\r\n+            prevSwVal = swVal\r\n+           \r\n+            # print(potVal)\r\n+            # print(swVal)\r\n+\r\n+        time.sleep(0.05)\r\n+\r\n+\r\n+    # print('end')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1621808758783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,75 @@\n+# This file is executed on every boot (including wake-boot from deepsleep)\r\n+#import esp\r\n+#esp.osdebug(None)\r\n+#import webrepl\r\n+#webrepl.start()\r\n+\r\n+from machine import Pin, ADC, UART\r\n+import time \r\n+import math\r\n+import ujson \r\n+\r\n+uart = UART(1, 115200)                                      # init with given baudrate\r\n+uart.init(115200, bits=8, parity=None, stop=1, txbuf=66)    # init with given parameters\r\n+\r\n+if __name__ == \"__main__\":\r\n+    print('start')\r\n+    \r\n+    pot_max_val = 4095\r\n+\r\n+    potPins = [34,36,32,33,39]\r\n+    potLen = len(potPins)\r\n+    pot = potVal = prevPotVal =[0] * potLen\r\n+\r\n+    swPins = [23,22,21,19,18,5,4,26,27,14]\r\n+    swLen = len(swPins)\r\n+    sw = swVal = prevSwVal = [0] * swLen\r\n+\r\n+\r\n+    while True:\r\n+        change = 0\r\n+        #Process the Pot Data\r\n+        for i in range(potLen):\r\n+            pot = ADC(Pin(potPins[i]))\r\n+            pot.atten(ADC.ATTN_11DB)\r\n+            currPotVal = round(pot.read()/pot_max_val,3)\r\n+            \r\n+            if currPotVal - 0.01 <= prevPotVal[i] <= currPotVal + 0.01:\r\n+                pass\r\n+            else:\r\n+                change = 1\r\n+                if currPotVal < 0.01:\r\n+                    potVal[i] == 0\r\n+                potVal[i] = currPotVal\r\n+\r\n+        # Process the Key Data\r\n+        for i in range(swLen):\r\n+            # changeSW = 0\r\n+            sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n+            swVal[i] = sw[i].value()\r\n+            \r\n+            #finding the dropping edve (since it is active low)\r\n+            if prevSwVal[i] == 1 and swVal[i] == 0: \r\n+                changeSW = 1\r\n+                swVal[i] = 1\r\n+\r\n+                # set the swVal aray to on only on dropping edge\r\n+        \r\n+        \r\n+        ## process the switch data to out everytime a key is pressed \r\n+        if change == 1:    \r\n+            data = [list(potVal), list(swVal)]\r\n+            print(data)\r\n+            uart.write(str(data))\r\n+            uart.write('')\r\n+\r\n+            prevPotVal = potVal\r\n+            prevSwVal = swVal\r\n+           \r\n+            # print(potVal)\r\n+            # print(swVal)\r\n+\r\n+        time.sleep(0.05)\r\n+\r\n+\r\n+    # print('end')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1621808858946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,177 +49,27 @@\n             swVal[i] = sw[i].value()\r\n             \r\n             #finding the dropping edve (since it is active low)\r\n             if prevSwVal[i] == 1 and swVal[i] == 0: \r\n-                changeSW = 1\r\n-                swVal[i] = 1\r\n-\r\n-                # set the swVal aray to on only on dropping edge\r\n-        \r\n-        \r\n-        ## process the switch data to out everytime a key is pressed \r\n-        if change == 1:    \r\n-            data = [list(potVal), list(swVal)]\r\n-            print(data)\r\n-            uart.write(str(data))\r\n-            uart.write('')\r\n-\r\n-            prevPotVal = potVal\r\n-            prevSwVal = swVal\r\n-           \r\n-            # print(potVal)\r\n-            # print(swVal)\r\n-\r\n-        time.sleep(0.05)\r\n-\r\n-\r\n-    # print('end')\n-# This file is executed on every boot (including wake-boot from deepsleep)\r\n-#import esp\r\n-#esp.osdebug(None)\r\n-#import webrepl\r\n-#webrepl.start()\r\n-\r\n-from machine import Pin, ADC, UART\r\n-import time \r\n-import math\r\n-import ujson \r\n-\r\n-uart = UART(1, 115200)                                      # init with given baudrate\r\n-uart.init(115200, bits=8, parity=None, stop=1, txbuf=66)    # init with given parameters\r\n-\r\n-if __name__ == \"__main__\":\r\n-    print('start')\r\n-    \r\n-    pot_max_val = 4095\r\n-\r\n-    potPins = [34,36,32,33,39]\r\n-    potLen = len(potPins)\r\n-    pot = potVal = prevPotVal =[0] * potLen\r\n-\r\n-    swPins = [23,22,21,19,18,5,4,26,27,14]\r\n-    swLen = len(swPins)\r\n-    sw = swVal = prevSwVal = [0] * swLen\r\n-\r\n-\r\n-    while True:\r\n-        change = 0\r\n-        #Process the Pot Data\r\n-        for i in range(potLen):\r\n-            pot = ADC(Pin(potPins[i]))\r\n-            pot.atten(ADC.ATTN_11DB)\r\n-            currPotVal = round(pot.read()/pot_max_val,3)\r\n-            \r\n-            if currPotVal - 0.01 <= prevPotVal[i] <= currPotVal + 0.01:\r\n-                pass\r\n-            else:\r\n                 change = 1\r\n-                if currPotVal < 0.01:\r\n-                    potVal[i] == 0\r\n-                potVal[i] = currPotVal\r\n-\r\n-        # Process the Key Data\r\n-        for i in range(swLen):\r\n-            changeSW = 0\r\n-            sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n-            swVal[i] = sw[i].value()\r\n-            \r\n-            #finding the dropping edve (since it is active low)\r\n-            if prevSwVal[i] == 1 and swVal[i] == 0: \r\n-                changeSW = 1\r\n                 swVal[i] = 1\r\n \r\n                 # set the swVal aray to on only on dropping edge\r\n         \r\n         \r\n         ## process the switch data to out everytime a key is pressed \r\n-        if change == 1:    \r\n-            data = [list(potVal), list(swVal)]\r\n-            print(data)\r\n-            uart.write(str(data))\r\n-            uart.write('')\r\n+        # if change == 1:    \r\n+        data = [list(potVal), list(swVal)]\r\n+        print(data)\r\n+        uart.write(str(data))\r\n+        uart.write('')\r\n \r\n-            prevPotVal = potVal\r\n-            prevSwVal = swVal\r\n+        prevPotVal = potVal\r\n+        prevSwVal = swVal\r\n            \r\n             # print(potVal)\r\n             # print(swVal)\r\n \r\n         time.sleep(0.05)\r\n \r\n \r\n-    # print('end')\n-# This file is executed on every boot (including wake-boot from deepsleep)\r\n-#import esp\r\n-#esp.osdebug(None)\r\n-#import webrepl\r\n-#webrepl.start()\r\n-\r\n-from machine import Pin, ADC, UART\r\n-import time \r\n-import math\r\n-import ujson \r\n-\r\n-uart = UART(1, 115200)                                      # init with given baudrate\r\n-uart.init(115200, bits=8, parity=None, stop=1, txbuf=66)    # init with given parameters\r\n-\r\n-if __name__ == \"__main__\":\r\n-    print('start')\r\n-    \r\n-    pot_max_val = 4095\r\n-\r\n-    potPins = [34,36,32,33,39]\r\n-    potLen = len(potPins)\r\n-    pot = potVal = prevPotVal =[0] * potLen\r\n-\r\n-    swPins = [23,22,21,19,18,5,4,26,27,14]\r\n-    swLen = len(swPins)\r\n-    sw = swVal = prevSwVal = [0] * swLen\r\n-\r\n-\r\n-    while True:\r\n-        change = 0\r\n-        #Process the Pot Data\r\n-        for i in range(potLen):\r\n-            pot = ADC(Pin(potPins[i]))\r\n-            pot.atten(ADC.ATTN_11DB)\r\n-            currPotVal = round(pot.read()/pot_max_val,3)\r\n-            \r\n-            if currPotVal - 0.01 <= prevPotVal[i] <= currPotVal + 0.01:\r\n-                pass\r\n-            else:\r\n-                change = 1\r\n-                if currPotVal < 0.01:\r\n-                    potVal[i] == 0\r\n-                potVal[i] = currPotVal\r\n-\r\n-        # Process the Key Data\r\n-        for i in range(swLen):\r\n-            change2 = 0\r\n-            sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n-            swVal[i] = sw[i].value()\r\n-            \r\n-            #finding the dropping edve (since it is active low)\r\n-            if prevSwVal[i] == 1 and swVal[i] == 0: \r\n-                change = 1\r\n-                swVal[i] = 1\r\n-\r\n-                # set the swVal aray to on only on dropping edge\r\n-        \r\n-        \r\n-        ## process the switch data to out everytime a key is pressed \r\n-        if change == 1:    \r\n-            data = [list(potVal), list(swVal)]\r\n-            print(data)\r\n-            uart.write(str(data))\r\n-            uart.write('')\r\n-\r\n-            prevPotVal = potVal\r\n-            prevSwVal = swVal\r\n-           \r\n-            # print(potVal)\r\n-            # print(swVal)\r\n-\r\n-        time.sleep(0.05)\r\n-\r\n-\r\n     # print('end')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1621808912052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,10 @@\n             #finding the dropping edve (since it is active low)\r\n             if prevSwVal[i] == 1 and swVal[i] == 0: \r\n                 change = 1\r\n                 swVal[i] = 1\r\n+            else:\r\n+                prevSWVal = prevSWVal*0\r\n \r\n                 # set the swVal aray to on only on dropping edge\r\n         \r\n         \r\n"
                },
                {
                    "date": 1621808951655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     pot = potVal = prevPotVal =[0] * potLen\r\n \r\n     swPins = [23,22,21,19,18,5,4,26,27,14]\r\n     swLen = len(swPins)\r\n-    sw = swVal = prevSwVal = [0] * swLen\r\n+    sw = swVal = prevSwVal = swValSend = [0] * swLen\r\n \r\n \r\n     while True:\r\n         change = 0\r\n@@ -50,9 +50,9 @@\n             \r\n             #finding the dropping edve (since it is active low)\r\n             if prevSwVal[i] == 1 and swVal[i] == 0: \r\n                 change = 1\r\n-                swVal[i] = 1\r\n+                swValSend[i] = 1\r\n             else:\r\n                 prevSWVal = prevSWVal*0\r\n \r\n                 # set the swVal aray to on only on dropping edge\r\n"
                },
                {
                    "date": 1621808971810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n             if prevSwVal[i] == 1 and swVal[i] == 0: \r\n                 change = 1\r\n                 swValSend[i] = 1\r\n             else:\r\n-                prevSWVal = prevSWVal*0\r\n+                swValSend[i] = - \r\n \r\n                 # set the swVal aray to on only on dropping edge\r\n         \r\n         \r\n"
                },
                {
                    "date": 1621808981742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,17 +52,17 @@\n             if prevSwVal[i] == 1 and swVal[i] == 0: \r\n                 change = 1\r\n                 swValSend[i] = 1\r\n             else:\r\n-                swValSend[i] = - \r\n+                swValSend[i] = 0 \r\n \r\n                 # set the swVal aray to on only on dropping edge\r\n         \r\n         \r\n         ## process the switch data to out everytime a key is pressed \r\n         # if change == 1:    \r\n-        data = [list(potVal), list(swVal)]\r\n-        print(data)\r\n+        data = [list(potVal), list(swValSend)]\r\n+        print(swValSend)\r\n         uart.write(str(data))\r\n         uart.write('')\r\n \r\n         prevPotVal = potVal\r\n"
                },
                {
                    "date": 1621809152861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,17 +47,18 @@\n             # changeSW = 0\r\n             sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n             swVal[i] = sw[i].value()\r\n             \r\n-            #finding the dropping edve (since it is active low)\r\n-            if prevSwVal[i] == 1 and swVal[i] == 0: \r\n-                change = 1\r\n-                swValSend[i] = 1\r\n-            else:\r\n-                swValSend[i] = 0 \r\n+            # #finding the dropping edve (since it is active low)\r\n+            # if prevSwVal[i] == 1 and swVal[i] == 0: \r\n+            #     change = 1\r\n+            #     swValSend[i] = 1\r\n+            # else:\r\n+            #     swValSend[i] = 0 \r\n \r\n                 # set the swVal aray to on only on dropping edge\r\n         \r\n+        swVal = p.logical_not(swVal).astype(int)\r\n         \r\n         ## process the switch data to out everytime a key is pressed \r\n         # if change == 1:    \r\n         data = [list(potVal), list(swValSend)]\r\n"
                },
                {
                    "date": 1621809162322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,10 +60,10 @@\n         swVal = p.logical_not(swVal).astype(int)\r\n         \r\n         ## process the switch data to out everytime a key is pressed \r\n         # if change == 1:    \r\n-        data = [list(potVal), list(swValSend)]\r\n-        print(swValSend)\r\n+        data = [list(potVal), list(swVal)]\r\n+        print(swVal)\r\n         uart.write(str(data))\r\n         uart.write('')\r\n \r\n         prevPotVal = potVal\r\n"
                },
                {
                    "date": 1621809178768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n             #     swValSend[i] = 0 \r\n \r\n                 # set the swVal aray to on only on dropping edge\r\n         \r\n-        swVal = p.logical_not(swVal).astype(int)\r\n+        swVal = np.logical_not(swVal).astype(int)\r\n         \r\n         ## process the switch data to out everytime a key is pressed \r\n         # if change == 1:    \r\n         data = [list(potVal), list(swVal)]\r\n"
                },
                {
                    "date": 1621809191627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n from machine import Pin, ADC, UART\r\n import time \r\n import math\r\n import ujson \r\n+import numpy as np\r\n \r\n uart = UART(1, 115200)                                      # init with given baudrate\r\n uart.init(115200, bits=8, parity=None, stop=1, txbuf=66)    # init with given parameters\r\n \r\n"
                },
                {
                    "date": 1621809326588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,8 @@\n from machine import Pin, ADC, UART\r\n import time \r\n import math\r\n import ujson \r\n-import numpy as np\r\n \r\n uart = UART(1, 115200)                                      # init with given baudrate\r\n uart.init(115200, bits=8, parity=None, stop=1, txbuf=66)    # init with given parameters\r\n \r\n@@ -47,9 +46,12 @@\n         for i in range(swLen):\r\n             # changeSW = 0\r\n             sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n             swVal[i] = sw[i].value()\r\n-            \r\n+            if swVal[i] != 1:\r\n+                swVal[i] = 1\r\n+            else :\r\n+                swVal[i] = 0\r\n             # #finding the dropping edve (since it is active low)\r\n             # if prevSwVal[i] == 1 and swVal[i] == 0: \r\n             #     change = 1\r\n             #     swValSend[i] = 1\r\n"
                },
                {
                    "date": 1621809338765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,8 @@\n             #     swValSend[i] = 0 \r\n \r\n                 # set the swVal aray to on only on dropping edge\r\n         \r\n-        swVal = np.logical_not(swVal).astype(int)\r\n         \r\n         ## process the switch data to out everytime a key is pressed \r\n         # if change == 1:    \r\n         data = [list(potVal), list(swVal)]\r\n"
                },
                {
                    "date": 1621809489026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     pot = potVal = prevPotVal =[0] * potLen\r\n \r\n     swPins = [23,22,21,19,18,5,4,26,27,14]\r\n     swLen = len(swPins)\r\n-    sw = swVal = prevSwVal = swValSend = [0] * swLen\r\n+    sw = swVal = prevSwVal = swSend = [0] * swLen\r\n \r\n \r\n     while True:\r\n         change = 0\r\n@@ -42,16 +42,21 @@\n                     potVal[i] == 0\r\n                 potVal[i] = currPotVal\r\n \r\n         # Process the Key Data\r\n+        swSend = [0] * swLen\r\n         for i in range(swLen):\r\n             # changeSW = 0\r\n             sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n             swVal[i] = sw[i].value()\r\n             if swVal[i] != 1:\r\n                 swVal[i] = 1\r\n             else :\r\n                 swVal[i] = 0\r\n+            \r\n+            if swVal[i] == 1 and prevSwVal == 0:\r\n+                change = 1\r\n+                swSend[i] = 1  \r\n             # #finding the dropping edve (since it is active low)\r\n             # if prevSwVal[i] == 1 and swVal[i] == 0: \r\n             #     change = 1\r\n             #     swValSend[i] = 1\r\n"
                },
                {
                    "date": 1621809501743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n         \r\n         \r\n         ## process the switch data to out everytime a key is pressed \r\n         # if change == 1:    \r\n-        data = [list(potVal), list(swVal)]\r\n+        data = [list(potVal), list(swSend)]\r\n         print(swVal)\r\n         uart.write(str(data))\r\n         uart.write('')\r\n \r\n"
                },
                {
                    "date": 1621809509729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,13 +66,13 @@\n                 # set the swVal aray to on only on dropping edge\r\n         \r\n         \r\n         ## process the switch data to out everytime a key is pressed \r\n-        # if change == 1:    \r\n-        data = [list(potVal), list(swSend)]\r\n-        print(swVal)\r\n-        uart.write(str(data))\r\n-        uart.write('')\r\n+        if change == 1:    \r\n+            data = [list(potVal), list(swSend)]\r\n+            print(swVal)\r\n+            uart.write(str(data))\r\n+            uart.write('')\r\n \r\n         prevPotVal = potVal\r\n         prevSwVal = swVal\r\n            \r\n"
                },
                {
                    "date": 1621809545946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n         \r\n         ## process the switch data to out everytime a key is pressed \r\n         if change == 1:    \r\n             data = [list(potVal), list(swSend)]\r\n-            print(swVal)\r\n+            print(swSend)\r\n             uart.write(str(data))\r\n             uart.write('')\r\n \r\n         prevPotVal = potVal\r\n"
                },
                {
                    "date": 1621809552994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n         \r\n         ## process the switch data to out everytime a key is pressed \r\n         if change == 1:    \r\n             data = [list(potVal), list(swSend)]\r\n-            print(swSend)\r\n+            print(data)\r\n             uart.write(str(data))\r\n             uart.write('')\r\n \r\n         prevPotVal = potVal\r\n"
                },
                {
                    "date": 1621809675575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,8 +55,9 @@\n             \r\n             if swVal[i] == 1 and prevSwVal == 0:\r\n                 change = 1\r\n                 swSend[i] = 1  \r\n+                print(swSend)\r\n             # #finding the dropping edve (since it is active low)\r\n             # if prevSwVal[i] == 1 and swVal[i] == 0: \r\n             #     change = 1\r\n             #     swValSend[i] = 1\r\n"
                },
                {
                    "date": 1621809692972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,10 @@\n         # Process the Key Data\r\n         swSend = [0] * swLen\r\n         for i in range(swLen):\r\n             # changeSW = 0\r\n+\r\n+            print(swLen)\r\n             sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n             swVal[i] = sw[i].value()\r\n             if swVal[i] != 1:\r\n                 swVal[i] = 1\r\n"
                },
                {
                    "date": 1621809701307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n             if swVal[i] != 1:\r\n                 swVal[i] = 1\r\n             else :\r\n                 swVal[i] = 0\r\n-            \r\n+            print(prevSwVal)\r\n             if swVal[i] == 1 and prevSwVal == 0:\r\n                 change = 1\r\n                 swSend[i] = 1  \r\n                 print(swSend)\r\n"
                },
                {
                    "date": 1621809753039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,16 +46,16 @@\n         swSend = [0] * swLen\r\n         for i in range(swLen):\r\n             # changeSW = 0\r\n \r\n-            print(swLen)\r\n+            print('sw'+swLen)\r\n             sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n             swVal[i] = sw[i].value()\r\n             if swVal[i] != 1:\r\n                 swVal[i] = 1\r\n             else :\r\n                 swVal[i] = 0\r\n-            print(prevSwVal)\r\n+            print('prevsw'+prevSwVal)\r\n             if swVal[i] == 1 and prevSwVal == 0:\r\n                 change = 1\r\n                 swSend[i] = 1  \r\n                 print(swSend)\r\n"
                },
                {
                    "date": 1621809770404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,16 +46,16 @@\n         swSend = [0] * swLen\r\n         for i in range(swLen):\r\n             # changeSW = 0\r\n \r\n-            print('sw'+swLen)\r\n+            print('sw'+str(swLen))\r\n             sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n             swVal[i] = sw[i].value()\r\n             if swVal[i] != 1:\r\n                 swVal[i] = 1\r\n             else :\r\n                 swVal[i] = 0\r\n-            print('prevsw'+prevSwVal)\r\n+            print('prevsw'+str(prevSwVal))\r\n             if swVal[i] == 1 and prevSwVal == 0:\r\n                 change = 1\r\n                 swSend[i] = 1  \r\n                 print(swSend)\r\n"
                },
                {
                    "date": 1621809790432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n         swSend = [0] * swLen\r\n         for i in range(swLen):\r\n             # changeSW = 0\r\n \r\n-            print('sw'+str(swLen))\r\n+            print('sw'+str(swSend))\r\n             sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n             swVal[i] = sw[i].value()\r\n             if swVal[i] != 1:\r\n                 swVal[i] = 1\r\n"
                },
                {
                    "date": 1621809804881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n         swSend = [0] * swLen\r\n         for i in range(swLen):\r\n             # changeSW = 0\r\n \r\n-            print('sw'+str(swSend))\r\n+            print('sw'+str(swVal))\r\n             sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n             swVal[i] = sw[i].value()\r\n             if swVal[i] != 1:\r\n                 swVal[i] = 1\r\n"
                },
                {
                    "date": 1621809848946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,12 +54,11 @@\n                 swVal[i] = 1\r\n             else :\r\n                 swVal[i] = 0\r\n             print('prevsw'+str(prevSwVal))\r\n-            if swVal[i] == 1 and prevSwVal == 0:\r\n+            if swVal[i] == 1 and prevSwVal[i] == 0:\r\n                 change = 1\r\n                 swSend[i] = 1  \r\n-                print(swSend)\r\n             # #finding the dropping edve (since it is active low)\r\n             # if prevSwVal[i] == 1 and swVal[i] == 0: \r\n             #     change = 1\r\n             #     swValSend[i] = 1\r\n"
                },
                {
                    "date": 1621809855319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,16 +46,16 @@\n         swSend = [0] * swLen\r\n         for i in range(swLen):\r\n             # changeSW = 0\r\n \r\n-            print('sw'+str(swVal))\r\n+            # print('sw'+str(swVal))\r\n             sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n             swVal[i] = sw[i].value()\r\n             if swVal[i] != 1:\r\n                 swVal[i] = 1\r\n             else :\r\n                 swVal[i] = 0\r\n-            print('prevsw'+str(prevSwVal))\r\n+            # print('prevsw'+str(prevSwVal))\r\n             if swVal[i] == 1 and prevSwVal[i] == 0:\r\n                 change = 1\r\n                 swSend[i] = 1  \r\n             # #finding the dropping edve (since it is active low)\r\n"
                },
                {
                    "date": 1621809896575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,8 +55,9 @@\n             else :\r\n                 swVal[i] = 0\r\n             # print('prevsw'+str(prevSwVal))\r\n             if swVal[i] == 1 and prevSwVal[i] == 0:\r\n+                print('we in')\r\n                 change = 1\r\n                 swSend[i] = 1  \r\n             # #finding the dropping edve (since it is active low)\r\n             # if prevSwVal[i] == 1 and swVal[i] == 0: \r\n"
                },
                {
                    "date": 1621809918262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,20 +28,20 @@\n \r\n     while True:\r\n         change = 0\r\n         #Process the Pot Data\r\n-        for i in range(potLen):\r\n-            pot = ADC(Pin(potPins[i]))\r\n-            pot.atten(ADC.ATTN_11DB)\r\n-            currPotVal = round(pot.read()/pot_max_val,3)\r\n+        # for i in range(potLen):\r\n+        #     pot = ADC(Pin(potPins[i]))\r\n+        #     pot.atten(ADC.ATTN_11DB)\r\n+        #     currPotVal = round(pot.read()/pot_max_val,3)\r\n             \r\n-            if currPotVal - 0.01 <= prevPotVal[i] <= currPotVal + 0.01:\r\n-                pass\r\n-            else:\r\n-                change = 1\r\n-                if currPotVal < 0.01:\r\n-                    potVal[i] == 0\r\n-                potVal[i] = currPotVal\r\n+        #     if currPotVal - 0.01 <= prevPotVal[i] <= currPotVal + 0.01:\r\n+        #         pass\r\n+        #     else:\r\n+        #         change = 1\r\n+        #         if currPotVal < 0.01:\r\n+        #             potVal[i] == 0\r\n+        #         potVal[i] = currPotVal\r\n \r\n         # Process the Key Data\r\n         swSend = [0] * swLen\r\n         for i in range(swLen):\r\n"
                },
                {
                    "date": 1621810013413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,8 +53,10 @@\n             if swVal[i] != 1:\r\n                 swVal[i] = 1\r\n             else :\r\n                 swVal[i] = 0\r\n+            \r\n+            print('sw='+str(swVal[i])+'prev'+str(prevSwVal[i]))\r\n             # print('prevsw'+str(prevSwVal))\r\n             if swVal[i] == 1 and prevSwVal[i] == 0:\r\n                 print('we in')\r\n                 change = 1\r\n"
                },
                {
                    "date": 1621810079162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,10 +77,11 @@\n             print(data)\r\n             uart.write(str(data))\r\n             uart.write('')\r\n \r\n+        prevSwVal = swVal\r\n         prevPotVal = potVal\r\n-        prevSwVal = swVal\r\n+        \r\n            \r\n             # print(potVal)\r\n             # print(swVal)\r\n \r\n"
                },
                {
                    "date": 1621810156063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,8 +84,8 @@\n            \r\n             # print(potVal)\r\n             # print(swVal)\r\n \r\n-        time.sleep(0.05)\r\n+        time.sleep(0.01)\r\n \r\n \r\n     # print('end')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1621810244156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,9 @@\n             print(data)\r\n             uart.write(str(data))\r\n             uart.write('')\r\n \r\n-        prevSwVal = swVal\r\n+        prevSwVal = swSend\r\n         prevPotVal = potVal\r\n         \r\n            \r\n             # print(potVal)\r\n"
                },
                {
                    "date": 1621810269119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n                 swVal[i] = 1\r\n             else :\r\n                 swVal[i] = 0\r\n             \r\n-            print('sw='+str(swVal[i])+'prev'+str(prevSwVal[i]))\r\n+            # print('sw='+str(swVal[i])+'prev'+str(prevSwVal[i]))\r\n             # print('prevsw'+str(prevSwVal))\r\n             if swVal[i] == 1 and prevSwVal[i] == 0:\r\n                 print('we in')\r\n                 change = 1\r\n"
                },
                {
                    "date": 1621810338084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,8 @@\n             \r\n             # print('sw='+str(swVal[i])+'prev'+str(prevSwVal[i]))\r\n             # print('prevsw'+str(prevSwVal))\r\n             if swVal[i] == 1 and prevSwVal[i] == 0:\r\n-                print('we in')\r\n                 change = 1\r\n                 swSend[i] = 1  \r\n             # #finding the dropping edve (since it is active low)\r\n             # if prevSwVal[i] == 1 and swVal[i] == 0: \r\n"
                },
                {
                    "date": 1621810401147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,20 +28,20 @@\n \r\n     while True:\r\n         change = 0\r\n         #Process the Pot Data\r\n-        # for i in range(potLen):\r\n-        #     pot = ADC(Pin(potPins[i]))\r\n-        #     pot.atten(ADC.ATTN_11DB)\r\n-        #     currPotVal = round(pot.read()/pot_max_val,3)\r\n+        for i in range(potLen):\r\n+            pot = ADC(Pin(potPins[i]))\r\n+            pot.atten(ADC.ATTN_11DB)\r\n+            currPotVal = round(pot.read()/pot_max_val,3)\r\n             \r\n-        #     if currPotVal - 0.01 <= prevPotVal[i] <= currPotVal + 0.01:\r\n-        #         pass\r\n-        #     else:\r\n-        #         change = 1\r\n-        #         if currPotVal < 0.01:\r\n-        #             potVal[i] == 0\r\n-        #         potVal[i] = currPotVal\r\n+            if currPotVal - 0.01 <= prevPotVal[i] <= currPotVal + 0.01:\r\n+                pass\r\n+            else:\r\n+                change = 1\r\n+                if currPotVal < 0.01:\r\n+                    potVal[i] == 0\r\n+                potVal[i] = currPotVal\r\n \r\n         # Process the Key Data\r\n         swSend = [0] * swLen\r\n         for i in range(swLen):\r\n"
                },
                {
                    "date": 1621810456933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,8 +83,8 @@\n            \r\n             # print(potVal)\r\n             # print(swVal)\r\n \r\n-        time.sleep(0.01)\r\n+        time.sleep(0.05)\r\n \r\n \r\n     # print('end')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1621810470161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,8 +83,8 @@\n            \r\n             # print(potVal)\r\n             # print(swVal)\r\n \r\n-        time.sleep(0.05)\r\n+        time.sleep(0.01)\r\n \r\n \r\n     # print('end')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1621810507343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n                     potVal[i] == 0\r\n                 potVal[i] = currPotVal\r\n \r\n         # Process the Key Data\r\n-        swSend = [0] * swLen\r\n+        # swSend = [0] * swLen\r\n         for i in range(swLen):\r\n             # changeSW = 0\r\n \r\n             # print('sw'+str(swVal))\r\n"
                },
                {
                    "date": 1621810542769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n                     potVal[i] == 0\r\n                 potVal[i] = currPotVal\r\n \r\n         # Process the Key Data\r\n-        # swSend = [0] * swLen\r\n+        swSend = [0] * swLen\r\n         for i in range(swLen):\r\n             # changeSW = 0\r\n \r\n             # print('sw'+str(swVal))\r\n"
                },
                {
                    "date": 1621810626173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,8 +39,10 @@\n             else:\r\n                 change = 1\r\n                 if currPotVal < 0.01:\r\n                     potVal[i] == 0\r\n+                if currPotVal < 0.988:\r\n+                    potVal[i] == 1\r\n                 potVal[i] = currPotVal\r\n \r\n         # Process the Key Data\r\n         swSend = [0] * swLen\r\n"
                },
                {
                    "date": 1621810685636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,10 +82,10 @@\n         prevSwVal = swSend\r\n         prevPotVal = potVal\r\n         \r\n            \r\n-            # print(potVal)\r\n-            # print(swVal)\r\n+            print(potVal)\r\n+            print(swVal)\r\n \r\n         time.sleep(0.01)\r\n \r\n \r\n"
                },
                {
                    "date": 1621810694637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,10 +82,10 @@\n         prevSwVal = swSend\r\n         prevPotVal = potVal\r\n         \r\n            \r\n-            print(potVal)\r\n-            print(swVal)\r\n+            # print(potVal)\r\n+            # print(swVal)\r\n \r\n         time.sleep(0.01)\r\n \r\n \r\n"
                },
                {
                    "date": 1621811308205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,21 +56,12 @@\n                 swVal[i] = 1\r\n             else :\r\n                 swVal[i] = 0\r\n             \r\n-            # print('sw='+str(swVal[i])+'prev'+str(prevSwVal[i]))\r\n-            # print('prevsw'+str(prevSwVal))\r\n+            #sends data only when key is pressed\r\n             if swVal[i] == 1 and prevSwVal[i] == 0:\r\n                 change = 1\r\n                 swSend[i] = 1  \r\n-            # #finding the dropping edve (since it is active low)\r\n-            # if prevSwVal[i] == 1 and swVal[i] == 0: \r\n-            #     change = 1\r\n-            #     swValSend[i] = 1\r\n-            # else:\r\n-            #     swValSend[i] = 0 \r\n-\r\n-                # set the swVal aray to on only on dropping edge\r\n         \r\n         \r\n         ## process the switch data to out everytime a key is pressed \r\n         if change == 1:    \r\n"
                },
                {
                    "date": 1621811315009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,10 +46,8 @@\n \r\n         # Process the Key Data\r\n         swSend = [0] * swLen\r\n         for i in range(swLen):\r\n-            # changeSW = 0\r\n-\r\n             # print('sw'+str(swVal))\r\n             sw[i] = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n             swVal[i] = sw[i].value()\r\n             if swVal[i] != 1:\r\n"
                },
                {
                    "date": 1621811796394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,8 +74,8 @@\n            \r\n             # print(potVal)\r\n             # print(swVal)\r\n \r\n-        time.sleep(0.01)\r\n+        time.sleep(0.02)\r\n \r\n \r\n     # print('end')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1621812175436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,12 +69,8 @@\n             uart.write('')\r\n \r\n         prevSwVal = swSend\r\n         prevPotVal = potVal\r\n-        \r\n-           \r\n-            # print(potVal)\r\n-            # print(swVal)\r\n \r\n         time.sleep(0.02)\r\n \r\n \r\n"
                },
                {
                    "date": 1621812233619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,8 @@\n         ## process the switch data to out everytime a key is pressed \r\n         if change == 1:    \r\n             data = [list(potVal), list(swSend)]\r\n             print(data)\r\n-            uart.write(str(data))\r\n             uart.write('')\r\n \r\n         prevSwVal = swSend\r\n         prevPotVal = potVal\r\n"
                },
                {
                    "date": 1621812403200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     potPins = [34,36,32,33,39]\r\n     potLen = len(potPins)\r\n     pot = potVal = prevPotVal =[0] * potLen\r\n \r\n-    swPins = [23,22,21,19,18,5,4,26,27,14]\r\n+    swPins = [23,21,18,4,27,22,19,5,26,14]\r\n     swLen = len(swPins)\r\n     sw = swVal = prevSwVal = swSend = [0] * swLen\r\n \r\n \r\n"
                },
                {
                    "date": 1621967043046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,8 +69,8 @@\n \r\n         prevSwVal = swSend\r\n         prevPotVal = potVal\r\n \r\n-        time.sleep(0.02)\r\n+        time.sleep(0.05)\r\n \r\n \r\n     # print('end')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1621967311765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,8 +69,8 @@\n \r\n         prevSwVal = swSend\r\n         prevPotVal = potVal\r\n \r\n-        time.sleep(0.05)\r\n+        time.sleep(0.1)\r\n \r\n \r\n     # print('end')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1621967347753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,8 +69,8 @@\n \r\n         prevSwVal = swSend\r\n         prevPotVal = potVal\r\n \r\n-        time.sleep(0.1)\r\n+        time.sleep(0.05)\r\n \r\n \r\n     # print('end')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1621967476877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n             data = [list(potVal), list(swSend)]\r\n             print(data)\r\n             uart.write('')\r\n \r\n-        prevSwVal = swSend\r\n+        prevSwVal = swVal\r\n         prevPotVal = potVal\r\n \r\n         time.sleep(0.05)\r\n \r\n"
                },
                {
                    "date": 1621967504904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n             data = [list(potVal), list(swSend)]\r\n             print(data)\r\n             uart.write('')\r\n \r\n-        prevSwVal = swVal\r\n+        prevSwVal = swSend\r\n         prevPotVal = potVal\r\n \r\n         time.sleep(0.05)\r\n \r\n"
                },
                {
                    "date": 1621967537281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,10 +58,12 @@\n             #sends data only when key is pressed\r\n             if swVal[i] == 1 and prevSwVal[i] == 0:\r\n                 change = 1\r\n                 swSend[i] = 1  \r\n+            if swVal[i] == 0 and prevSwVal[i] == 1:\r\n+                change = 1\r\n+                swSend[i] = 1  \r\n         \r\n-        \r\n         ## process the switch data to out everytime a key is pressed \r\n         if change == 1:    \r\n             data = [list(potVal), list(swSend)]\r\n             print(data)\r\n"
                },
                {
                    "date": 1621967672563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n                 change = 1\r\n                 swSend[i] = 1  \r\n             if swVal[i] == 0 and prevSwVal[i] == 1:\r\n                 change = 1\r\n-                swSend[i] = 1  \r\n+                swSend[i] = 0  \r\n         \r\n         ## process the switch data to out everytime a key is pressed \r\n         if change == 1:    \r\n             data = [list(potVal), list(swSend)]\r\n"
                },
                {
                    "date": 1621967745849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,8 +71,8 @@\n \r\n         prevSwVal = swSend\r\n         prevPotVal = potVal\r\n \r\n-        time.sleep(0.05)\r\n+        time.sleep(0.001)\r\n \r\n \r\n     # print('end')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1621967793303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,8 +71,8 @@\n \r\n         prevSwVal = swSend\r\n         prevPotVal = potVal\r\n \r\n-        time.sleep(0.001)\r\n+        time.sleep(0.03)\r\n \r\n \r\n     # print('end')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1621967824415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,12 +58,9 @@\n             #sends data only when key is pressed\r\n             if swVal[i] == 1 and prevSwVal[i] == 0:\r\n                 change = 1\r\n                 swSend[i] = 1  \r\n-            if swVal[i] == 0 and prevSwVal[i] == 1:\r\n-                change = 1\r\n-                swSend[i] = 0  \r\n-        \r\n+\r\n         ## process the switch data to out everytime a key is pressed \r\n         if change == 1:    \r\n             data = [list(potVal), list(swSend)]\r\n             print(data)\r\n"
                },
                {
                    "date": 1621967829713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,8 +68,8 @@\n \r\n         prevSwVal = swSend\r\n         prevPotVal = potVal\r\n \r\n-        time.sleep(0.03)\r\n+        time.sleep(0.07)\r\n \r\n \r\n     # print('end')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1621967864860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,8 +68,8 @@\n \r\n         prevSwVal = swSend\r\n         prevPotVal = potVal\r\n \r\n-        time.sleep(0.07)\r\n+        time.sleep(0.05)\r\n \r\n \r\n     # print('end')\n\\ No newline at end of file\n"
                },
                {
                    "date": 1622124030173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,8 @@\n \r\n from machine import Pin, ADC, UART\r\n import time \r\n import math\r\n-import ujson \r\n \r\n uart = UART(1, 115200)                                      # init with given baudrate\r\n uart.init(115200, bits=8, parity=None, stop=1, txbuf=66)    # init with given parameters\r\n \r\n"
                }
            ],
            "date": 1621621797238,
            "name": "Commit-0",
            "content": "# This file is executed on every boot (including wake-boot from deepsleep)\r\n#import esp\r\n#esp.osdebug(None)\r\n#import webrepl\r\n#webrepl.start()\r\n\r\nfrom machine import Pin, ADC, UART\r\nimport time \r\nimport math\r\nimport ujson \r\n\r\nuart = UART(1, 115200)                                      # init with given baudrate\r\nuart.init(115200, bits=8, parity=None, stop=1, txbuf=66)    # init with given parameters\r\n\r\nif __name__ == \"__main__\":\r\n    print('start')\r\n    \r\n    pot_max_val = 4095\r\n\r\n    potPins = [34,35,32,33, 39]\r\n    potLen = len(potPins)\r\n    pot = potVal = prevPotVal =[0] * potLen\r\n\r\n    swPins = [23,22,21,19,18,5,4,26,27,14]\r\n    swLen = len(swPins)\r\n    sw = swVal = prevSwVal = [0] * swLen\r\n\r\n\r\n    while True:\r\n        change = 0\r\n        #Process the Pot Data\r\n        for i in range(potLen):\r\n            pot = ADC(Pin(potPins[i]))\r\n            pot.atten(ADC.ATTN_11DB)\r\n            currPotVal = round(pot.read()/pot_max_val,3)\r\n            \r\n            if currPotVal - 0.01 <= prevPotVal[i] <= currPotVal + 0.01:\r\n                pass\r\n            else:\r\n                change = 1\r\n                if currPotVal < 0.01:\r\n                    potVal[i] == 0\r\n                potVal[i] = currPotVal\r\n        # print(potVal)\r\n\r\n        #Process the Key Data\r\n        for i in range(swLen):\r\n            sw = Pin(swPins[i], Pin.IN, Pin.PULL_UP)\r\n            currSwVal = sw.value()\r\n            \r\n            #finding the dropping edve (since it is active low)\r\n            if prevSwVal == 1 and currSwVal == 0: \r\n                change = 1\r\n                # set the swVal aray to on only on dropping edge\r\n                pass\r\n        # print(swVal)\r\n        \r\n        ## process the switch data to out everytime a key is pressed \r\n        if change == 1:    \r\n            data = [list(potVal), list(swVal)]\r\n            print(data)\r\n            uart.write(str(data))\r\n            uart.write('')\r\n\r\n            prevPotVal = potVal\r\n            prevSwVal = swVal\r\n\r\n        time.sleep(0.05)\r\n\r\n\r\n    # print('end')"
        }
    ]
}